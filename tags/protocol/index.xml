<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Protocol on I make stuff</title>
    <link>https://hechen.xyz/tags/protocol/</link>
    <description>Recent content in Protocol on I make stuff</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sun, 29 Sep 2019 10:30:30 +0800</lastBuildDate>
    
	<atom:link href="https://hechen.xyz/tags/protocol/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Alamofire 和 RxSwift 中的 .af 以及 .rx 扩展是怎么实现的</title>
      <link>https://hechen.xyz/post/alamofire-rxswift-af-rx/</link>
      <pubDate>Sun, 29 Sep 2019 10:30:30 +0800</pubDate>
      
      <guid>https://hechen.xyz/post/alamofire-rxswift-af-rx/</guid>
      <description>今天继续来一篇水文，关于 Alamofire 和 RxSwift 两个组件中扩展后缀 .af 以及 .rx 是怎么实现的。相信用过的 (￣ω￣(￣ω￣〃 (￣ω￣〃)ゝ 都看过了。我这里权当自己的记</description>
    </item>
    
    <item>
      <title>Swift 中的消息派发</title>
      <link>https://hechen.xyz/post/messagedispatchinswift/</link>
      <pubDate>Sun, 15 Sep 2019 20:56:50 +0000</pubDate>
      
      <guid>https://hechen.xyz/post/messagedispatchinswift/</guid>
      <description>什么是消息派发？ 消息派发，英文名称 Method Dispatch，是指程序在运行过程中调用某个方法的时候决议使用哪个具体指令的过程。消息派发的行为在我们</description>
    </item>
    
    <item>
      <title>Protocol Extension</title>
      <link>https://hechen.xyz/post/protocol-extension/</link>
      <pubDate>Thu, 08 Aug 2019 19:00:20 +0800</pubDate>
      
      <guid>https://hechen.xyz/post/protocol-extension/</guid>
      <description>Protocol 作为 Swift 生态的最重要的组成部分（没有之一），其搭建起了整个语言生态的各个组成部分。 相对于继承而言，Protocol 的几个比较直观的优势： 无需</description>
    </item>
    
  </channel>
</rss>