<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Swift on I make stuff</title>
    <link>https://hechen.xyz/tags/swift/</link>
    <description>Recent content in Swift on I make stuff</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sun, 15 Sep 2019 20:56:50 +0000</lastBuildDate>
    
	<atom:link href="https://hechen.xyz/tags/swift/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Swift 中的消息派发</title>
      <link>https://hechen.xyz/post/messagedispatchinswift/</link>
      <pubDate>Sun, 15 Sep 2019 20:56:50 +0000</pubDate>
      
      <guid>https://hechen.xyz/post/messagedispatchinswift/</guid>
      <description>什么是消息派发？ 消息派发，英文名称 Method Dispatch，是指程序在运行过程中调用某个方法的时候决议使用哪个具体指令的过程。消息派发的行为在我们</description>
    </item>
    
    <item>
      <title>Protocol Extension</title>
      <link>https://hechen.xyz/post/protocol-extension/</link>
      <pubDate>Thu, 08 Aug 2019 19:00:20 +0800</pubDate>
      
      <guid>https://hechen.xyz/post/protocol-extension/</guid>
      <description>Protocol 作为 Swift 生态的最重要的组成部分（没有之一），其搭建起了整个语言生态的各个组成部分。 相对于继承而言，Protocol 的几个比较直观的优势： 无需</description>
    </item>
    
    <item>
      <title>在 Swift Framework 中使用 C 文件的过程探索</title>
      <link>https://hechen.xyz/post/swift-and-modules/</link>
      <pubDate>Thu, 03 Jan 2019 21:19:24 +0000</pubDate>
      
      <guid>https://hechen.xyz/post/swift-and-modules/</guid>
      <description>问题描述 我们在开发线上诊断工具需求的时候，是以单个 Pod 的形式提供支持，并且代码文件中只有纯 Swift 文件，但是其中需要用到系统的 C 库的一些功能，本次就</description>
    </item>
    
    <item>
      <title>三个简单步骤让你测试使用系统单例的代码</title>
      <link>https://hechen.xyz/post/testing-swift-code-that-uses-system-singletons-in-3-easy-steps/</link>
      <pubDate>Tue, 17 Jul 2018 17:09:57 +0000</pubDate>
      
      <guid>https://hechen.xyz/post/testing-swift-code-that-uses-system-singletons-in-3-easy-steps/</guid>
      <description>原文：Testing Swift code that uses system singletons in 3 easy steps 原作者 @johnsundell 大部分在 Apple 平台开发的 App 都会依赖基于单例的 API。从 UIScreen 到 UIApplication，再到 NSB</description>
    </item>
    
    <item>
      <title>避免在 Swift 中使用单例</title>
      <link>https://hechen.xyz/post/avoiding-singletons-in-swift/</link>
      <pubDate>Mon, 16 Jul 2018 17:34:36 +0000</pubDate>
      
      <guid>https://hechen.xyz/post/avoiding-singletons-in-swift/</guid>
      <description>原文：Avoiding singletons in Swift 原作者 &amp;amp; Copyright @johnsundell “我知道单例不好，但是&amp;hellip;”，这是开发者常常在讨论代码的时候会提到的。貌似社区大家有共识</description>
    </item>
    
    <item>
      <title>Swift 中几种不同的依赖注入方式</title>
      <link>https://hechen.xyz/post/different-flavors-of-dependency-injection-in-swift/</link>
      <pubDate>Mon, 16 Jul 2018 13:57:24 +0000</pubDate>
      
      <guid>https://hechen.xyz/post/different-flavors-of-dependency-injection-in-swift/</guid>
      <description>原文：Different flavors of dependency injection in Swift 原作者 &amp;amp; Copyright @johnsundell 在之前的几篇博客中，我们已经了解了几种使用依赖注入方式使得某个 swift app 拥有一个更加解耦可测试的架</description>
    </item>
    
    <item>
      <title>What is LLVM</title>
      <link>https://hechen.xyz/post/what-is-llvm/</link>
      <pubDate>Tue, 10 Jul 2018 12:05:58 +0000</pubDate>
      
      <guid>https://hechen.xyz/post/what-is-llvm/</guid>
      <description>什么是 LLVM？隐藏在 Swift，Rust，Clang 等语言背后的奥秘 了解编译器是如何生成机器原生代码会使得倒腾新语言或者加强已经存在的编程</description>
    </item>
    
    <item>
      <title>在 Swift 中使用工厂模式进行依赖注入</title>
      <link>https://hechen.xyz/post/dependency-injection-using-factories-in-swift/</link>
      <pubDate>Sun, 19 Nov 2017 18:17:15 +0000</pubDate>
      
      <guid>https://hechen.xyz/post/dependency-injection-using-factories-in-swift/</guid>
      <description>原文：Dependency injection using factories in Swift 原作者 &amp;amp; Copyright @johnsundell 依赖注入是一项使得代码更加可测试的关键工具。我们不需要持有某些对象，或者创建这些对象的自有依</description>
    </item>
    
    <item>
      <title>处理 Swift 中非可选的可选值类型</title>
      <link>https://hechen.xyz/post/handling-non-optional-optionals-in-swift/</link>
      <pubDate>Tue, 14 Nov 2017 21:53:52 +0000</pubDate>
      
      <guid>https://hechen.xyz/post/handling-non-optional-optionals-in-swift/</guid>
      <description>原文：Handling non-optional optionals in Swift 原作者 &amp;amp; Copyright @johnsundell 可选值（optionals）无可争议的是 swift 语言中最重要的特性之一，也是和其他语言，例如 Objective-C 的最大区别</description>
    </item>
    
    <item>
      <title>Capturing objects in Swift closures</title>
      <link>https://hechen.xyz/post/capturing-objects-in-swift-closures/</link>
      <pubDate>Sun, 12 Nov 2017 20:56:50 +0000</pubDate>
      
      <guid>https://hechen.xyz/post/capturing-objects-in-swift-closures/</guid>
      <description>原文：Capturing objects in Swift closures 原作者 @johnsundell 自从 Block 在 iOS4 被引入 Objective-C 的世界之后就成为了 Apple 各平台上最时髦的 API 的重要组成部分了。当 Swift 语言出现的时候，blo</description>
    </item>
    
    <item>
      <title>@autoclosure &amp;&amp; @escape</title>
      <link>https://hechen.xyz/post/autoclosure-escape/</link>
      <pubDate>Sun, 12 Nov 2017 20:01:54 +0000</pubDate>
      
      <guid>https://hechen.xyz/post/autoclosure-escape/</guid>
      <description>我们知道在 swift 中，闭包（closure）是一等公民，因此可以被当作参数传递，在学习 swift 的过程中经常会看到某些关键字修饰该闭包，@autoclos</description>
    </item>
    
    <item>
      <title>关于 iOS10 Notification 的那些事儿</title>
      <link>https://hechen.xyz/post/ios-notification/</link>
      <pubDate>Sat, 20 May 2017 10:10:54 +0000</pubDate>
      
      <guid>https://hechen.xyz/post/ios-notification/</guid>
      <description>概览 推送通知我们大家都不陌生，可以说几乎每个使用智能手机的人每天都会被不同的通知 打扰 到，正式因为合适的推送是吸引用户注意力的利器，其成为了各</description>
    </item>
    
    <item>
      <title>如何使用UIBezierPath实现一个弹性视图动画</title>
      <link>https://hechen.xyz/post/elastic-view-animation-using-uibezierpath/</link>
      <pubDate>Wed, 02 Dec 2015 18:53:51 +0000</pubDate>
      
      <guid>https://hechen.xyz/post/elastic-view-animation-using-uibezierpath/</guid>
      <description>原文：Elastic view animation, or how I built DGElasticPullToRefresh 原作者 @gontovnik DGElasticPullToRefresh 展示了如何实现一个弹性效果。效果如下图所示： 开发环境： Xcode 7 Swift 2.0 要求： 开发者至少对 UIBezierPath 和 UIGestureRecognizer 有一定的了</description>
    </item>
    
  </channel>
</rss>