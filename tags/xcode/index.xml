<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>XCode on I make stuff</title>
    <link>https://hechen.xyz/tags/xcode/</link>
    <description>Recent content in XCode on I make stuff</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Thu, 25 Apr 2019 11:30:30 +0800</lastBuildDate>
    
	<atom:link href="https://hechen.xyz/tags/xcode/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Build Process</title>
      <link>https://hechen.xyz/post/xcode-build-system/</link>
      <pubDate>Thu, 25 Apr 2019 11:30:30 +0800</pubDate>
      
      <guid>https://hechen.xyz/post/xcode-build-system/</guid>
      <description>编程语言的处理过程大致会有五个阶段，其每个阶段均有对应的工具： 预处理器 Preprocessor 编译器 Compiler 汇编器 Assembler 链接器 Linker 加载器 Loader 以下，我们以一个简单的源文件，来看看</description>
    </item>
    
    <item>
      <title>关于 OC 和 Swift 混编的一些注意事项</title>
      <link></link>
      <pubDate>Fri, 27 Jul 2018 18:04:09 +0000</pubDate>
      
      <guid></guid>
      <description></description>
    </item>
    
    <item>
      <title>三个简单步骤让你测试使用系统单例的代码</title>
      <link>https://hechen.xyz/post/testing-swift-code-that-uses-system-singletons-in-3-easy-steps/</link>
      <pubDate>Tue, 17 Jul 2018 17:09:57 +0000</pubDate>
      
      <guid>https://hechen.xyz/post/testing-swift-code-that-uses-system-singletons-in-3-easy-steps/</guid>
      <description>大部分在 Apple 平台开发的 App 都会依赖基于单例的 API。从 UIScreen 到 UIApplication，再到 NSBundle，而 Foundation，UIKit 以</description>
    </item>
    
    <item>
      <title>避免在 Swift 中使用单例</title>
      <link>https://hechen.xyz/post/avoiding-singletons-in-swift/</link>
      <pubDate>Mon, 16 Jul 2018 17:34:36 +0000</pubDate>
      
      <guid>https://hechen.xyz/post/avoiding-singletons-in-swift/</guid>
      <description>“我知道单例不好，但是&amp;hellip;”，这是开发者常常在讨论代码的时候会提到的。貌似社区大家有共识 ── 单例不好。但是同时，包括 Apple 和第三方的</description>
    </item>
    
    <item>
      <title>Swift 中几种不同的依赖注入方式</title>
      <link>https://hechen.xyz/post/different-flavors-of-dependency-injection-in-swift/</link>
      <pubDate>Mon, 16 Jul 2018 13:57:24 +0000</pubDate>
      
      <guid>https://hechen.xyz/post/different-flavors-of-dependency-injection-in-swift/</guid>
      <description>原文：Modular Xcode projects 原作者 &amp;amp; Copyright @pepibumur 翻译：@OgreMergO 在之前的几篇博客中，我们已经了解了几种使用依赖注入方式使得某个 swift app 拥有一个更加</description>
    </item>
    
    <item>
      <title>在 Swift 中使用工厂模式进行依赖注入</title>
      <link>https://hechen.xyz/post/dependency-injection-using-factories-in-swift/</link>
      <pubDate>Sun, 19 Nov 2017 18:17:15 +0000</pubDate>
      
      <guid>https://hechen.xyz/post/dependency-injection-using-factories-in-swift/</guid>
      <description>依赖注入是一项使得代码更加可测试的关键工具。我们不需要持有某些对象，或者创建这些对象的自有依赖，或者通过单例来获取他们，而是尽可能使那些对象</description>
    </item>
    
    <item>
      <title>模块化 Xcode 工程</title>
      <link>https://hechen.xyz/post/modular-xcode-projects/</link>
      <pubDate>Sun, 19 Nov 2017 18:17:15 +0000</pubDate>
      
      <guid>https://hechen.xyz/post/modular-xcode-projects/</guid>
      <description>原文：Modular Xcode projects 原作者 &amp;amp; Copyright @pepibumur 翻译：@OgreMergO 使用 Xcode 构建模块化的工程就需要对工程结构以及其基础概念有很好的理解才行。 我们平时</description>
    </item>
    
  </channel>
</rss>