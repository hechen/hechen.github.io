<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Translation on I make stuff</title>
    <link>https://hechen.xyz/categories/translation/</link>
    <description>Recent content in Translation on I make stuff</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Tue, 17 Jul 2018 17:09:57 +0000</lastBuildDate>
    
	<atom:link href="https://hechen.xyz/categories/translation/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>三个简单步骤让你测试使用系统单例的代码</title>
      <link>https://hechen.xyz/post/testing-swift-code-that-uses-system-singletons-in-3-easy-steps/</link>
      <pubDate>Tue, 17 Jul 2018 17:09:57 +0000</pubDate>
      
      <guid>https://hechen.xyz/post/testing-swift-code-that-uses-system-singletons-in-3-easy-steps/</guid>
      <description>大部分在 Apple 平台开发的 App 都会依赖基于单例的 API。从 UIScreen 到 UIApplication，再到 NSBundle，而 Foundation，UIKit 以</description>
    </item>
    
    <item>
      <title>避免在 Swift 中使用单例</title>
      <link>https://hechen.xyz/post/avoiding-singletons-in-swift/</link>
      <pubDate>Mon, 16 Jul 2018 17:34:36 +0000</pubDate>
      
      <guid>https://hechen.xyz/post/avoiding-singletons-in-swift/</guid>
      <description>“我知道单例不好，但是&amp;hellip;”，这是开发者常常在讨论代码的时候会提到的。貌似社区大家有共识 ── 单例不好。但是同时，包括 Apple 和第三方的</description>
    </item>
    
    <item>
      <title>Swift 中几种不同的依赖注入方式</title>
      <link>https://hechen.xyz/post/different-flavors-of-dependency-injection-in-swift/</link>
      <pubDate>Mon, 16 Jul 2018 13:57:24 +0000</pubDate>
      
      <guid>https://hechen.xyz/post/different-flavors-of-dependency-injection-in-swift/</guid>
      <description>在之前的几篇博客中，我们已经了解了几种使用依赖注入方式使得某个 swift app 拥有一个更加解耦可测试的架构。比如在 在 Swift 中使用工厂模式进行依赖注入 中和工厂</description>
    </item>
    
    <item>
      <title>What is LLVM</title>
      <link>https://hechen.xyz/post/what-is-llvm/</link>
      <pubDate>Tue, 10 Jul 2018 12:05:58 +0000</pubDate>
      
      <guid>https://hechen.xyz/post/what-is-llvm/</guid>
      <description>什么是 LLVM？隐藏在 Swift，Rust，Clang 等语言背后的奥秘 了解编译器是如何生成机器原生代码会使得倒腾新语言或者加强已经存在的编程</description>
    </item>
    
    <item>
      <title>在 Swift 中使用工厂模式进行依赖注入</title>
      <link>https://hechen.xyz/post/dependency-injection-using-factories-in-swift/</link>
      <pubDate>Sun, 19 Nov 2017 18:17:15 +0000</pubDate>
      
      <guid>https://hechen.xyz/post/dependency-injection-using-factories-in-swift/</guid>
      <description>依赖注入是一项使得代码更加可测试的关键工具。我们不需要持有某些对象，或者创建这些对象的自有依赖，或者通过单例来获取他们，而是尽可能使那些对象</description>
    </item>
    
    <item>
      <title>模块化 Xcode 工程</title>
      <link>https://hechen.xyz/post/modular-xcode-projects/</link>
      <pubDate>Sun, 19 Nov 2017 18:17:15 +0000</pubDate>
      
      <guid>https://hechen.xyz/post/modular-xcode-projects/</guid>
      <description>使用 Xcode 构建模块化的工程就需要对工程结构以及其基础概念有很好的理解才行。我们平时不怎么关注工程结构本身，只有在工程逐渐变大，要添加更多依赖的时</description>
    </item>
    
    <item>
      <title>处理 Swift 中非可选的可选值类型</title>
      <link>https://hechen.xyz/post/handling-non-optional-optionals-in-swift/</link>
      <pubDate>Tue, 14 Nov 2017 21:53:52 +0000</pubDate>
      
      <guid>https://hechen.xyz/post/handling-non-optional-optionals-in-swift/</guid>
      <description>可选值（optionals）无可争议的是 swift 语言中最重要的特性之一，也是和其他语言，例如 Objective-C 的最大区别。通过强制处理那些有可能出现 nil 的地方，我们</description>
    </item>
    
    <item>
      <title>Capturing objects in Swift closures</title>
      <link>https://hechen.xyz/post/capturing-objects-in-swift-closures/</link>
      <pubDate>Sun, 12 Nov 2017 20:56:50 +0000</pubDate>
      
      <guid>https://hechen.xyz/post/capturing-objects-in-swift-closures/</guid>
      <description>自从 Block 在 iOS4 被引入 Objective-C 的世界之后就成为了 Apple 各平台上最时髦的 API 的重要组成部分了。当 Swift 语言出现的时候，blocks 的概念就摇身一变通过 closure 的形式引入，</description>
    </item>
    
    <item>
      <title>如何使用UIBezierPath实现一个弹性视图动画</title>
      <link>https://hechen.xyz/post/elastic-view-animation-using-uibezierpath/</link>
      <pubDate>Wed, 02 Dec 2015 18:53:51 +0000</pubDate>
      
      <guid>https://hechen.xyz/post/elastic-view-animation-using-uibezierpath/</guid>
      <description>Hey！ DGElasticPullToRefresh展示如何实现一个弹性效果。效果如下图所示： 开发环境： Xcode 7 Swift 2.0 要求： 开发者至少对UIBez</description>
    </item>
    
    <item>
      <title>理解Objective-C运行时</title>
      <link>https://hechen.xyz/post/understanding-the-objective-c-runtime/</link>
      <pubDate>Mon, 07 Sep 2015 17:55:33 +0000</pubDate>
      
      <guid>https://hechen.xyz/post/understanding-the-objective-c-runtime/</guid>
      <description>Objective-C 运行时对于刚刚踏入 Cocoa/Objective 世界的人是很容易忽 略的 Objective-C 语言的特性之一。原因就是尽管 Objective-C 是一门几个小时之内入门的语言，但是投身 Cocoa 的新手们会花费大量时间在</description>
    </item>
    
    <item>
      <title>我们是如何创建iOS版的Guillotine菜单动画的</title>
      <link>https://hechen.xyz/post/how-we-created-guillotine-menu-animation-for-ios/</link>
      <pubDate>Tue, 01 Sep 2015 15:52:07 +0000</pubDate>
      
      <guid>https://hechen.xyz/post/how-we-created-guillotine-menu-animation-for-ios/</guid>
      <description>你是否曾经有过这样的疑问？为什么app中几乎是清一色的侧边栏（sidebar），为什么不把它做成topBar或者bottomBar，甚至co</description>
    </item>
    
  </channel>
</rss>