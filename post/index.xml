<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on I make stuff</title>
    <link>https://hechen.xyz/post/</link>
    <description>Recent content in Posts on I make stuff</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sat, 30 Mar 2019 11:29:54 +0800</lastBuildDate>
    
	<atom:link href="https://hechen.xyz/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>写个小工具 Swwwitch</title>
      <link>https://hechen.xyz/post/swwwitch/</link>
      <pubDate>Sat, 30 Mar 2019 11:29:54 +0800</pubDate>
      
      <guid>https://hechen.xyz/post/swwwitch/</guid>
      <description>最近追热点 😂 ，做了个小工具，仅做练手。一键切换功能开发，现在只包含了两个开关：切换系统主题和隐藏桌面 icon 的功能。其实，从我个人而言，有 Alfred 以及 LaunchBar</description>
    </item>
    
    <item>
      <title>Mac 平台上那些 Dockless 的 App 都是如何实现的？</title>
      <link>https://hechen.xyz/post/dockless-cocoaapps/</link>
      <pubDate>Wed, 13 Mar 2019 17:29:54 +0800</pubDate>
      
      <guid>https://hechen.xyz/post/dockless-cocoaapps/</guid>
      <description>在 Mac 平台你判断一个工具好用不好用，吸引不吸引你，其中 Menu Only 也是吸引你的一点，不需要常驻 Dock 栏，在多 workspace 的时候也不影响正常使用。尤其是针对一些需要便</description>
    </item>
    
    <item>
      <title>如何在英文语言系统的 Safari 中使用印象笔记？</title>
      <link>https://hechen.xyz/post/using-yinxiangbiji-system-english/</link>
      <pubDate>Wed, 13 Mar 2019 00:30:49 +0800</pubDate>
      
      <guid>https://hechen.xyz/post/using-yinxiangbiji-system-english/</guid>
      <description>因为 Evernote 在国内使用了不同的账户体系，去年团队也彻底独立出来，但是 Safari 的剪藏插件是同一个，下载地址，但是当你系统是英文系统的时候，使用 Safari 剪藏有点尴</description>
    </item>
    
    <item>
      <title>为 NSView 增加 backgroundColor</title>
      <link>https://hechen.xyz/post/nsview&#43;backgroundcolor/</link>
      <pubDate>Mon, 11 Mar 2019 15:19:49 +0800</pubDate>
      
      <guid>https://hechen.xyz/post/nsview&#43;backgroundcolor/</guid>
      <description>NSView 作为 Cocoa 中最基本的构成元素，是构成整个 Mac App 视图体系的基础，和 UIView 在 iOS 世界中的位置一样重要，可是在 UIView 里司空见惯的背景色设置，在 NSView 中却不见身影。 在</description>
    </item>
    
    <item>
      <title>RxSwift 中的几种 Subject</title>
      <link>https://hechen.xyz/post/rxswift-subjects/</link>
      <pubDate>Tue, 26 Feb 2019 10:24:38 +0800</pubDate>
      
      <guid>https://hechen.xyz/post/rxswift-subjects/</guid>
      <description>文中所用插图均出自书籍 《RxSwift - Reactive Programming with Swift》 Subject 在 Rx 的世界里是这么一种存在，其既可以作为观测者，也可以作为被观测者。自然而然想到</description>
    </item>
    
    <item>
      <title>Apple Event Sandboxing</title>
      <link>https://hechen.xyz/post/appleevents-usage-description/</link>
      <pubDate>Thu, 21 Feb 2019 23:25:38 +0800</pubDate>
      
      <guid>https://hechen.xyz/post/appleevents-usage-description/</guid>
      <description>问题背景 最近在修改某个 Mac 应用，其原理就是通过执行一段 AppleScript 获取 OmniFocus 的信息，然后进行可视化展示，但是总取不到数据。 原因 关键数据获取阶段执行的 AppleScript 的时候</description>
    </item>
    
    <item>
      <title>关于一次 SS 流量丢失的过程记录</title>
      <link>https://hechen.xyz/post/%E5%85%B3%E4%BA%8E%E4%B8%80%E6%AC%A1-ss-%E6%B5%81%E9%87%8F%E4%B8%A2%E5%A4%B1%E7%9A%84%E8%BF%87%E7%A8%8B%E8%AE%B0%E5%BD%95/</link>
      <pubDate>Mon, 28 Jan 2019 17:51:35 +0000</pubDate>
      
      <guid>https://hechen.xyz/post/%E5%85%B3%E4%BA%8E%E4%B8%80%E6%AC%A1-ss-%E6%B5%81%E9%87%8F%E4%B8%A2%E5%A4%B1%E7%9A%84%E8%BF%87%E7%A8%8B%E8%AE%B0%E5%BD%95/</guid>
      <description>2019-01-29 更新 早上一到办公室连接上公司网络，网速直接就飚到了 600KB/s，果不其然，还是 com.apple.Safari.SafeBrowsing.Service 这个服务进程。这就尴尬了，看来并不是说你不用 Safari 就不会触发</description>
    </item>
    
    <item>
      <title>在 Swift Framework 中使用 C 文件的过程探索</title>
      <link>https://hechen.xyz/post/swift-and-modules/</link>
      <pubDate>Thu, 03 Jan 2019 21:19:24 +0000</pubDate>
      
      <guid>https://hechen.xyz/post/swift-and-modules/</guid>
      <description>问题描述 我们在开发线上诊断工具需求的时候，是以单个 Pod 的形式提供支持，并且代码文件中只有纯 Swift 文件，但是其中需要用到系统的 C 库的一些功能，本次就</description>
    </item>
    
    <item>
      <title>UserDefaults and Keychain</title>
      <link>https://hechen.xyz/post/userdefaults-and-keychain/</link>
      <pubDate>Fri, 21 Dec 2018 14:30:50 +0000</pubDate>
      
      <guid>https://hechen.xyz/post/userdefaults-and-keychain/</guid>
      <description>Apple 提供了几种持久化方案，其中 UserDefaults 和 Keychain 是 App 开发过程中使用频率最高的方案，而且从以往和同事的探讨过程中发现对这两个概念中有一些细节还是理解不太透彻</description>
    </item>
    
    <item>
      <title>如何制作 Send to 2Do 的 Safari 书签</title>
      <link>https://hechen.xyz/post/send-to-2do/</link>
      <pubDate>Mon, 26 Nov 2018 14:59:50 +0000</pubDate>
      
      <guid>https://hechen.xyz/post/send-to-2do/</guid>
      <description>使用鼠标拖拽下面这个链接到你的 Favorites Bar 上， 2Do Send to 2Do 然后编辑地址，将其替换为如下： 1 javascript:window.location=&amp;#39;twodo://x-callback-url/add?task=&amp;#39;+encodeURIComponent(document.title)+&amp;#39;&amp;amp;note=&amp;#39;+encodeURIComponent(window.location)+&amp;#39;&amp;amp;action=url:&amp;#39;+encodeURIComponent(window.location) 所以，本质上是执行了一段 JS 代码，结合当前文档的上下文信息，调</description>
    </item>
    
    <item>
      <title>阅读流程</title>
      <link>https://hechen.xyz/post/reading-process/</link>
      <pubDate>Tue, 16 Oct 2018 17:01:44 +0000</pubDate>
      
      <guid>https://hechen.xyz/post/reading-process/</guid>
      <description>最近统一了一下自己的阅读流程，更新一下，具体用到的工具有 DEVONThink Pro PDFExpert MarginNote 其中 1 是输入和归档源，3 是输出源。 大概就是如下所示： 采集素材 在平时浏览网页的</description>
    </item>
    
    <item>
      <title>三个简单步骤让你测试使用系统单例的代码</title>
      <link>https://hechen.xyz/post/testing-swift-code-that-uses-system-singletons-in-3-easy-steps/</link>
      <pubDate>Tue, 17 Jul 2018 17:09:57 +0000</pubDate>
      
      <guid>https://hechen.xyz/post/testing-swift-code-that-uses-system-singletons-in-3-easy-steps/</guid>
      <description>大部分在 Apple 平台开发的 App 都会依赖基于单例的 API。从 UIScreen 到 UIApplication，再到 NSBundle，而 Foundation，UIKit 以</description>
    </item>
    
    <item>
      <title>避免在 Swift 中使用单例</title>
      <link>https://hechen.xyz/post/avoiding-singletons-in-swift/</link>
      <pubDate>Mon, 16 Jul 2018 17:34:36 +0000</pubDate>
      
      <guid>https://hechen.xyz/post/avoiding-singletons-in-swift/</guid>
      <description>“我知道单例不好，但是&amp;hellip;”，这是开发者常常在讨论代码的时候会提到的。貌似社区大家有共识 ── 单例不好。但是同时，包括 Apple 和第三方的</description>
    </item>
    
    <item>
      <title>Swift 中几种不同的依赖注入方式</title>
      <link>https://hechen.xyz/post/different-flavors-of-dependency-injection-in-swift/</link>
      <pubDate>Mon, 16 Jul 2018 13:57:24 +0000</pubDate>
      
      <guid>https://hechen.xyz/post/different-flavors-of-dependency-injection-in-swift/</guid>
      <description>原文：Modular Xcode projects 原作者 &amp;amp; Copyright @pepibumur 翻译：@OgreMergO 在之前的几篇博客中，我们已经了解了几种使用依赖注入方式使得某个 swift app 拥有一个更加</description>
    </item>
    
    <item>
      <title>那些我恢复 Mac 系统之后要安装的 Apps</title>
      <link>https://hechen.xyz/post/my-favorite-mac-apps/</link>
      <pubDate>Wed, 11 Jul 2018 12:58:37 +0000</pubDate>
      
      <guid>https://hechen.xyz/post/my-favorite-mac-apps/</guid>
      <description>记录一下自己常用的 Mac Apps，每次重装之后到了用的时候发现忘记安装了(不是每次都用 TimeMachine 恢复)，而且强烈简易大家如果某个 App 有对应的独立安装版本的</description>
    </item>
    
    <item>
      <title>What is LLVM</title>
      <link>https://hechen.xyz/post/what-is-llvm/</link>
      <pubDate>Tue, 10 Jul 2018 12:05:58 +0000</pubDate>
      
      <guid>https://hechen.xyz/post/what-is-llvm/</guid>
      <description>什么是 LLVM？隐藏在 Swift，Rust，Clang 等语言背后的奥秘 了解编译器是如何生成机器原生代码会使得倒腾新语言或者加强已经存在的编程</description>
    </item>
    
    <item>
      <title>In App Purchase</title>
      <link>https://hechen.xyz/post/in-app-purchase/</link>
      <pubDate>Thu, 24 May 2018 10:40:39 +0000</pubDate>
      
      <guid>https://hechen.xyz/post/in-app-purchase/</guid>
      <description>对于在 App Store 中上架的应⽤来说，应⽤内购买(In-App Purchase，简称 IAP) 应该是一个避不开的话题，尤其是去年微信打赏和 Apple 之间的争执更让 IAP 火</description>
    </item>
    
    <item>
      <title>在 Swift 中使用工厂模式进行依赖注入</title>
      <link>https://hechen.xyz/post/dependency-injection-using-factories-in-swift/</link>
      <pubDate>Sun, 19 Nov 2017 18:17:15 +0000</pubDate>
      
      <guid>https://hechen.xyz/post/dependency-injection-using-factories-in-swift/</guid>
      <description>依赖注入是一项使得代码更加可测试的关键工具。我们不需要持有某些对象，或者创建这些对象的自有依赖，或者通过单例来获取他们，而是尽可能使那些对象</description>
    </item>
    
    <item>
      <title>模块化 Xcode 工程</title>
      <link>https://hechen.xyz/post/modular-xcode-projects/</link>
      <pubDate>Sun, 19 Nov 2017 18:17:15 +0000</pubDate>
      
      <guid>https://hechen.xyz/post/modular-xcode-projects/</guid>
      <description>原文：Modular Xcode projects 原作者 &amp;amp; Copyright @pepibumur 翻译：@OgreMergO 使用 Xcode 构建模块化的工程就需要对工程结构以及其基础概念有很好的理解才行。我们平时</description>
    </item>
    
    <item>
      <title>处理 Swift 中非可选的可选值类型</title>
      <link>https://hechen.xyz/post/handling-non-optional-optionals-in-swift/</link>
      <pubDate>Tue, 14 Nov 2017 21:53:52 +0000</pubDate>
      
      <guid>https://hechen.xyz/post/handling-non-optional-optionals-in-swift/</guid>
      <description>可选值（optionals）无可争议的是 swift 语言中最重要的特性之一，也是和其他语言，例如 Objective-C 的最大区别。通过强制处理那些有可能出现 nil 的地方，我们</description>
    </item>
    
  </channel>
</rss>