<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>I make stuff</title>
    <link>https://hechen.xyz/</link>
    <description>Recent content on I make stuff</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Thu, 08 Aug 2019 19:00:20 +0800</lastBuildDate>
    
        <atom:link href="https://hechen.xyz/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>About</title>
      <link>https://hechen.xyz/about/</link>
      <pubDate>Sun, 20 Aug 2017 21:38:52 +0800</pubDate>
      
      <guid>https://hechen.xyz/about/</guid>
      
        <description>&lt;p&gt;做过 C++ 开发&lt;/p&gt;

&lt;p&gt;目前做 iOS 开发，偶尔做个 Mac 开发&lt;/p&gt;

&lt;p&gt;打杂中&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>Protocol Extension</title>
      <link>https://hechen.xyz/post/protocol-extension/</link>
      <pubDate>Thu, 08 Aug 2019 19:00:20 +0800</pubDate>
      
      <guid>https://hechen.xyz/post/protocol-extension/</guid>
      
        <description>&lt;p&gt;Protocol 作为 Swift 生态的最重要的组成部分（没有之一），其搭建起了整个语言生态的各个组成部分。&lt;/p&gt;

&lt;p&gt;相对于继承而言，Protocol 的几个比较直观的优势：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;无需必须去强制继承某个类；&lt;/li&gt;
&lt;li&gt;通过协议可以改造已经存在的类型；&lt;/li&gt;
&lt;li&gt;适用范围更大一些，使得 struct 和 enum 这些值类型也能够继承能力&lt;/li&gt;
&lt;li&gt;Swift 语言本身是不支持多继承的，你需要花费精力去纠结继承哪个 class，一旦出现不同的能力分散在不同父类的情况，就更加纠结了，你甚至需要去修改原有的父类；&lt;/li&gt;
&lt;li&gt;继承的话，还需要考虑 override 父类方法的问题，比如调用 super 方法的时机问题；&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;这篇文章想记录下 Protocol Extension 中的一点区别。&lt;/p&gt;

&lt;p&gt;我们知道 Swift Protocol 中是没有 optional 关键字的，因此只要是在 Protocol 定义的方法，即为 Protocol Requirements，符合该协议的类型就必须实现，否则是不完整的。比如，我们自己实现了 TableView，定义了这么多 delegate 协议方法，要求调用方全都提供，就太不人道了😢&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/yA76SiN.png&#34; alt=&#34;Protocol&#34; /&gt;&lt;/p&gt;

&lt;p&gt;因此，我们会通过对 Protocol 进行扩展，给该协议方法增加缺省实现，剩余的方法则是你需要调用方必须实现的方法。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/MRA0k6z.png&#34; alt=&#34;Optional Protocol&#34; /&gt;&lt;/p&gt;

&lt;p&gt;如果针对某个协议 P，我们扩展 P 给其增加某个协议方法有两种形式：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;直接在 Protocol 定义里定义新方法，该方法成为实现该协议必须实现的方法；&lt;/li&gt;
&lt;li&gt;为 Protocol 增加扩展方法，该方法并不一定要求符合该协议的类型进行实现；&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;这两者有什么区别呢？ 我们看代码&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/T3filbG.png&#34; alt=&#34;Static Dispatch&#34; /&gt;&lt;/p&gt;

&lt;p&gt;发现 s 调用的是我们为 S 结构体增加的扩展方法，而 s2 调用的是 P 协议的扩展方法，尽管实体对象的动态类型是 S，但是因为声明的静态类型不一样，调用结果也不同。&lt;/p&gt;

&lt;p&gt;对于 1 中的方法，运行时进行动态派发，也就是真实根据其具体类型来做决议，2 中的方法是进行静态派发，也就是说你声明的该对象是什么类型，就调用该类型的方法。 以上述的代码为例，s1 的静态类型由编译器推导为 S，而 s2 的静态类型声明为 P ，因此二者在调用扩展协议方法时候的表现不一致。&lt;/p&gt;

&lt;p&gt;如果想确保调用方法时候不因为静态类型不同而导致不同的结果，可以将协议扩展方法在 P 协议定义的地方加入，自此所有符合该协议的类型就必须强制实现该协议，此时该方法则是通过动态决议来派发了。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/LzDWuWp.png&#34; alt=&#34;Dynamic Dispatch&#34; /&gt;&lt;/p&gt;

&lt;p&gt;而我们了解完这些之后，对上面 TableView 的栗子就有了更深刻的理解，Protocol 中的方法定义使得所有符合该协议的类型在运行时进行决议（也就是对象的动态类型），而这个过程中如果发现该对象已经实现了。&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>LetsMove 中的几个点</title>
      <link>https://hechen.xyz/post/letsmove/</link>
      <pubDate>Thu, 04 Jul 2019 01:19:10 +0800</pubDate>
      
      <guid>https://hechen.xyz/post/letsmove/</guid>
      
        <description>

&lt;p&gt;当我们从网络上下载某个 mac app 之后，一般都会默认在 Downloads 目录里，但是某一些 App 是需要放置到 Application 目录才行，最常见的就是自更新功能是受到当前所处目录的限制的，这时候很多下载到本地的 .app 文件打开之后都会弹出提示框，让用户选择是否移动到 Applications 目录，LetsMove 就是大部分 mac app 参考或者集成的开源库，封装了这套逻辑。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/99z1BQf.png&#34; alt=&#34;LetsMove&#34; /&gt;&lt;/p&gt;

&lt;p&gt;这个库已经好多年了，最近的一次 Commit 是 2017年，其中有几个点可以学习借鉴。&lt;/p&gt;

&lt;h3 id=&#34;大致思路&#34;&gt;大致思路&lt;/h3&gt;

&lt;p&gt;虽然叫 Move，实际上是先行 Copy 一份当前的 App Bundle 到 Application 目录，然后杀掉自己并删除源目录的 App 文件。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Move to Applications Folder 确认之后&lt;/li&gt;
&lt;li&gt;复制当前 App 文件到 /Applications 目录中&lt;/li&gt;
&lt;li&gt;删除当前已经打开 App （Mac 上是可行的，不同于 Windows，不存在占用文件句柄的情况）&lt;/li&gt;
&lt;li&gt;执行子进程执行重启过程，具体后文会讲。&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;权限获取-提权&#34;&gt;权限获取（提权）&lt;/h3&gt;

&lt;p&gt;检查文件路径是否可以写入的方法是 NSFileManager 的 isWritableFileAtPath ，如果返回 false，LetsMove 会主动进行权限获取。&lt;/p&gt;

&lt;p&gt;获取权限所使用的接口是 AuthorizationExecuteWithPrivileges，该接口实际在 OSX 10.7 Lion 之后就已经标记废弃了，但是一直到目前的 macOS 10.14 还一直可以使用。&lt;/p&gt;

&lt;p&gt;而作者为了避免苹果直接移除该代码导致提权接口不可用，使用了动态查找方法的形式，利用 dlsym 查找方法指针来获取，从而避免如果完全移除该方法导致功能不稳定的情况发生。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/LPQw1VR.png&#34; alt=&#34;Privileges Acquirement&#34; /&gt;&lt;/p&gt;

&lt;p&gt;通过该方法获取了 rm 和 cp 命令在指定目录的权限，这个过程中用户会收到输入 Admin Password  的提示的。&lt;/p&gt;

&lt;p&gt;当然现有的提权官方有建议使用一个 helper 程序来负责或者使用 Service Management framework 来做，这两者在做 App 自启动的时候已经了解过了，确实不如这一个方法来的简单。有兴趣可以去看下 LaunchdDaemon 这个东东。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Use a launchd-launched helper tool and/or the Service Mangement framework
for this functionality.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;relaunch&#34;&gt;Relaunch&lt;/h3&gt;

&lt;p&gt;Relaunch 方法是将应用移动到 /Applications 目录后的后续动作。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/VnRvggh.png&#34; alt=&#34;Relaunch Code&#34; /&gt;&lt;/p&gt;

&lt;p&gt;其中 NSTask 重启进程的 Shell 脚本如下：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/hBftQB9.png&#34; alt=&#34;Relaunch Shell Script&#34; /&gt;&lt;/p&gt;

&lt;p&gt;该方法涉及两个主要职能：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;将拷贝到 /Applications 目录下的 App 文件增加扩展属性&lt;/li&gt;
&lt;li&gt;执行 Shell 脚本，杀掉当前父进程，并重启刚刚 Copy 到 /Applications 目录下的 App 文件&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;关于第一点，使用 kill 命令来杀掉当前主进程，但是使用的是 kill -0，不是任何有效的 signal，关于该命令只是查询当前你是否有权限来做 kill 这件事情，这一块也没看明白该方法的意义在哪里，知道的同学可以告知下；&lt;/p&gt;

&lt;p&gt;关于第二点，用到了 xattr 命令，该命令是用来针对文件的扩展属性做操作的。上方的命令就是为当前已经移动到 /Applications 目录下的 App 文件去除 com.apple.quarantine 属性。不知道大家记得不，从某些网站下完 App 之后，比如 Github Desktop 客户端，打开会提示如下窗口：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/i9qfEtf.png&#34; alt=&#34;Download from Web&#34; /&gt;&lt;/p&gt;

&lt;p&gt;这个是 macOS 自身的安全校验提示，当然一般从 web 下载的 App 本身都会被加上 com.apple.quarantine 的扩展属性，这里是移除了该属性，防止执行了 open 之后弹出该提示叨扰用户。&lt;/p&gt;

&lt;p&gt;当然，这一切都是在非沙盒应用中才能够实现，关键原因在于沙盒环境下授权相关的 API 都是受到严格限制的。如果想针对沙盒应用做，一般会制作成 dmg 文件格式来供用户显式操作。&lt;/p&gt;

&lt;h2 id=&#34;references&#34;&gt;References&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://unix.stackexchange.com/questions/169898/what-does-kill-0-do&#34;&gt;What does &lt;code&gt;kill -0&lt;/code&gt; do?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Extended_file_attributes&#34;&gt;Extended file attributes - Wikipedia&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/potionfactory/LetsMove/issues/41&#34;&gt;Doesn&amp;rsquo;t work with sandboxed apps&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
      
    </item>
    
    <item>
      <title>XPC Services</title>
      <link>https://hechen.xyz/post/xpcservice/</link>
      <pubDate>Thu, 04 Jul 2019 01:01:10 +0800</pubDate>
      
      <guid>https://hechen.xyz/post/xpcservice/</guid>
      
        <description>

&lt;h2 id=&#34;关于-xpc&#34;&gt;关于 XPC&lt;/h2&gt;

&lt;p&gt;因为最近在做的工作涉及到这一块，就大致的记录一下，针对 XPC 技术也做个总结。&lt;/p&gt;

&lt;p&gt;XPC 是 macOS 上一种进程间通信的技术统称，其使得我们可以将 Mac 应用的功能模块拆分成不同的多进程模式，关于进程之间的通信也被系统封装完整了，你只需要按照既定的模式做即可。其带来的最大的好处是&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;提高 App 自身的稳定性&lt;/li&gt;
&lt;li&gt;进行权限隔离&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;拿我目前在做的工作来讲，确实有针对以上这两点的需求。上层业务通过执行脚本命令获取执行结果，执行脚本命令使用的就是 NSTask，大概结构如下：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/8glAV2u.png&#34; alt=&#34;shared-42f9e747-a47b-46fd-b445-0c7615b41020&#34; /&gt;&lt;/p&gt;

&lt;p&gt;对于执行 NSTask 的这层命令行执行模块来讲，拆分到独立的进程中使得安全性得以提高，即使 XPC 进程挂掉，一般情况下再次向 XPC 通信，系统会自行恢复启用新的 XPC 进程，而主应用无感知。&lt;/p&gt;

&lt;h2 id=&#34;xpc-架构&#34;&gt;XPC 架构&lt;/h2&gt;

&lt;p&gt;在 Apple 官方文档中有如下图，很清楚的展示了整个 NSXPC 的架构。&lt;/p&gt;

&lt;p&gt;主应用和 XPC Service 之间是通过 NSXPCConnection 对象保持通信的，其通信接口由 Protocol 定义，然后暴露给外界一个符合了该协议的对象。&lt;/p&gt;

&lt;p&gt;所有的 XPC Service 本身是由系统级别程序 launchd 来管理和维护的。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/OdvfZk4.png&#34; alt=&#34;NSXPC_intro_2x-337fb6a3-4df5-47b3-a322-e52c48905753&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;开发过程&#34;&gt;开发过程&lt;/h2&gt;

&lt;p&gt;整体上主应用和 XPC 通信是标准的 Client-Server 模式。客户端询问 Server 端数据，Server 端应答即可。这之间的数据序列化完全交由系统管理。&lt;/p&gt;

&lt;h3 id=&#34;具体步骤&#34;&gt;具体步骤&lt;/h3&gt;

&lt;h4 id=&#34;新建-xpc-service-的-target&#34;&gt;新建 XPC Service 的 Target&lt;/h4&gt;

&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/BNFRaG7.png&#34; alt=&#34;Add New XPC Service Target&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/AyEq9Iv.png&#34; alt=&#34;Input Target Info&#34; /&gt;&lt;/p&gt;

&lt;p&gt;这里要说一点，Xcode 提供的 XPC Service 创建的时候是没有语言选项的，默认都是创建的 Objective-C 的样板文件，但是你是可以把所有的代码文件删除，然后建立 main.swift 来写的，一样能够开发。&lt;/p&gt;

&lt;h4 id=&#34;建立-listener-监听连接&#34;&gt;建立 Listener，监听连接&lt;/h4&gt;

&lt;p&gt;实际上，当你建立完毕 Targe 之后，系统默认生成的文件里已经将对应的代码大致过程已经通过注释和代码列出来了。我将这部分逻辑在 Swift 文件里也写了出来，如下：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/o3gCND7.png&#34; alt=&#34;NSXCListener&#34; /&gt;&lt;/p&gt;

&lt;p&gt;每个 Service 会启动 NSConnectionListener，其代理方法是 NSXPCListenerDelegate，一旦主应用发起连接，该代理方法就会启动来做连接前的准备，而代理方法中的主要逻辑就三点：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;告诉 Connection 对象，Service 暴露的接口（协议）；&lt;/li&gt;
&lt;li&gt;传递给 Connection 对象一个符合了前面协议的对象；&lt;/li&gt;
&lt;li&gt;启动连接；&lt;/li&gt;
&lt;li&gt;返回是否允许本次连接建立；&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;其中 ServiceDemo 就是具体实现接口的对象。&lt;/p&gt;

&lt;h4 id=&#34;主应用发起连接&#34;&gt;主应用发起连接&lt;/h4&gt;

&lt;p&gt;一般会在 App 启动之后启动连接，具体步骤如下，&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;创建 NSXPCConnection 对象，指定连接哪个 Service&lt;/li&gt;
&lt;li&gt;指定使用哪个协议接口（Protocol 的 Membership 需要主应用和 XPC Service 的Targe 共享）&lt;/li&gt;
&lt;li&gt;resume&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/3UTQgK6.png&#34; alt=&#34;Main Application&#34; /&gt;&lt;/p&gt;

&lt;p&gt;但是此时 Service 里的监听实际上还未执行，直到你发起第一次 Request。向 XPC Service 发起动作的具体就是从刚刚创建的 NSXPCConnection 中获取对应的接口以及执行该接口来和 Service 交互。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/9vACIeA.png&#34; alt=&#34;Request&#34; /&gt;&lt;/p&gt;

&lt;p&gt;整体过程如 Apple 文档里的图示过程，&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/BWf2G3l.png&#34; alt=&#34;NSXPC_connection_2x-38a1e530-7c34-400b-a39b-eca9eaadbe22&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;需要注意的几点&#34;&gt;需要注意的几点&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;NSXPCInterface 定义的方法回调只能有一个 Block，如果多于一个就会报异常。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;XPCDemo[46250:3466789] NSXPCInterface: Only one reply block is allowed per selector (XPCDemo.DragonServiceProtocol / fireWithTimes:withSuccess:withFailure:)&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;关于一次 Request 通信多次 Response&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;类似于下载任务要获取下载进度的问题，在迁移 NSTask 执行层的过程中，面临的一个需求是针对 XPCService 端 NSTask 执行过程中的持续性的输出都要能够回调给 Client 端，而 Reply 回调只能响应一次。&lt;/p&gt;

&lt;p&gt;我们在主应用端希望能够通过一个 Block 不断获取当前最新的数据，可是，不幸的是，XPC 并不支持如此。比如，我们希望能够通过回调实时获取状态。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/x2qwpVP.png&#34; alt=&#34;Run Command with multiple replies&#34; /&gt;&lt;/p&gt;

&lt;p&gt;具体可以参考 &lt;a href=&#34;https://forums.developer.apple.com/thread/35731&#34;&gt;https://forums.developer.apple.com/thread/35731&lt;/a&gt; 论坛中 Apple 人员的回复，总结起来两点：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Client 以及 Service 自行维护状态，将一次请求多次回调，拆分为多次请求多次回调即可；&lt;/li&gt;
&lt;li&gt;Client 转移要交付的第三方给 Service 直接交互（一般比如 API ）&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;references&#34;&gt;References&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.apple.com/library/archive/documentation/MacOSX/Conceptual/BPSystemStartup/Chapters/CreatingXPCServices.html&#34;&gt;Creating XPC Services&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.objc.io/issues/14-mac/xpc/&#34;&gt;XPC · objc.io&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://forums.developer.apple.com/thread/35731&#34;&gt;XPC&amp;hellip;Can&amp;rsquo;t call a reply block multiple times? |Apple Developer Forums&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
      
    </item>
    
    <item>
      <title>Codable &amp;&amp; Tuple</title>
      <link>https://hechen.xyz/post/tuple-codable/</link>
      <pubDate>Mon, 10 Jun 2019 23:50:54 +0800</pubDate>
      
      <guid>https://hechen.xyz/post/tuple-codable/</guid>
      
        <description>

&lt;p&gt;During my learning of Swift, many interesting things I will find. Codable is one of them.&lt;/p&gt;

&lt;p&gt;Today, I defined a model with a tuple type, then Xcode told me some error. Codes may like as below.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/c67KrA8.png&#34; alt=&#34;Codable Person&#34; /&gt;&lt;/p&gt;

&lt;p&gt;You may want Xcode automatically complete all the codable stuff. However, life is hard. Codes like these can even not be compiled. Xcode will tell you name cannot be synthesize the Person because of the FullName.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;error: default.playground:5:8: error: type &amp;#39;Person&amp;#39; does not conform to protocol &amp;#39;Decodable&amp;#39;
struct Person: Codable {
       ^

Swift.Decodable:2:12: note: protocol requires initializer &amp;#39;init(from:)&amp;#39; with type &amp;#39;Decodable&amp;#39;
    public init(from decoder: Decoder) throws
           ^

default.playground:6:9: note: cannot automatically synthesize &amp;#39;Decodable&amp;#39; because &amp;#39;FullName&amp;#39; (aka &amp;#39;(firstName: String, secondName: String)&amp;#39;) does not conform to &amp;#39;Decodable&amp;#39;
    var name: FullName
        ^

error: default.playground:5:8: error: type &amp;#39;Person&amp;#39; does not conform to protocol &amp;#39;Encodable&amp;#39;
struct Person: Codable {
       ^

Swift.Encodable:2:17: note: protocol requires function &amp;#39;encode(to:)&amp;#39; with type &amp;#39;Encodable&amp;#39;
    public func encode(to encoder: Encoder) throws
                ^

default.playground:6:9: note: cannot automatically synthesize &amp;#39;Encodable&amp;#39; because &amp;#39;FullName&amp;#39; (aka &amp;#39;(firstName: String, secondName: String)&amp;#39;) does not conform to &amp;#39;Encodable&amp;#39;
    var name: FullName
        ^&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;So, We know that if a struct or class is codable implicitly, it must not contain properties which are not codable. Tuple is one of them.&lt;/p&gt;

&lt;p&gt;Some people argue that why tuple cannot be designed as a codable type? Yeah, the hope is that tuples could conform to protocols in future. This is covered in the generics manifesto as &amp;ldquo;Extensions of Structural Types 28&amp;rdquo;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Extensions of structural types
Currently, only nominal types (classes, structs, enums, protocols) can be extended. One could imagine extending structural types&amp;ndash;particularly tuple types&amp;ndash;to allow them to, e.g., conform to protocols. For example, pulling together variadic generics, parameterized extensions, and conditional conformances, one could express &amp;ldquo;a tuple type is Equatable if all of its element types are Equatable&amp;rdquo;:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;extension&amp;lt;...Elements : Equatable&amp;gt; (Elements...) : Equatable {   // extending the tuple type &amp;#34;(Elements...)&amp;#34; to be Equatable
}&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;There are some natural bounds here: one would need to have actual structural types. One would not be able to extend every type:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;extension&amp;lt;T&amp;gt; T { // error: neither a structural nor a nominal type
}&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;And before you think you&amp;rsquo;re cleverly making it possible to have a conditional conformance that makes every type T that conforms to protocol P also conform to protocol Q, see the section &amp;ldquo;Conditional conformances via protocol extensions&amp;rdquo;, below:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;extension&amp;lt;T : P&amp;gt; T : Q { // error: neither a structural nor a nominal type
}&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;So for now, you have to synthesize the tuple type by yourself.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/CsXtVWP.png&#34; alt=&#34;Synthesize Properties by youself&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;references&#34;&gt;References&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://forums.swift.org/t/codable-tuples/14174&#34;&gt;Codable Tuples&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/apple/swift/blob/master/docs/GenericsManifesto.md#extensions-of-structural-types&#34;&gt;Swift GenericsManifesto.md&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
      
    </item>
    
    <item>
      <title>How to generate a NSViewController without a Nib?</title>
      <link>https://hechen.xyz/post/create-nsviewcontroller-without-nib/</link>
      <pubDate>Mon, 03 Jun 2019 20:55:54 +0800</pubDate>
      
      <guid>https://hechen.xyz/post/create-nsviewcontroller-without-nib/</guid>
      
        <description>

&lt;p&gt;In the last days, I created all the ViewControllers through the storyboard or the Nib (for views). Today, when I created a demo project without any Nib file, the ViewController did not show as I expected.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;WTF, Can you believe that? I cannot even create a ViewController now.&lt;/p&gt;

&lt;p&gt;There exist some differences between iOS and macOS.&lt;/p&gt;

&lt;h2 id=&#34;ios&#34;&gt;iOS&lt;/h2&gt;

&lt;p&gt;In the previous development on the iOS platform, create a ViewController, specifically UIViewController instance, is dead simple as below.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-Swift&#34; data-lang=&#34;Swift&#34;&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-Swift&#34; data-lang=&#34;Swift&#34;&gt;&lt;span class=&#34;kd&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;UIKit&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;ViewController&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;UIViewController&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{}&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;vc&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ViewController&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;span class=&#34;bp&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;vc.view.frame = &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;\(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;vc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;view&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;frame&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;You can create a UIViewController without a nib file, and customize the view&amp;rsquo;s properties as you like. Nothing unexpected happen and ViewController has a default view.&lt;/p&gt;

&lt;h2 id=&#34;macos-cocoa&#34;&gt;macOS (Cocoa)&lt;/h2&gt;

&lt;p&gt;However, when you want to create a NSViewController in the same way, something wrong occur.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-Swift&#34; data-lang=&#34;Swift&#34;&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-Swift&#34; data-lang=&#34;Swift&#34;&gt;&lt;span class=&#34;kd&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Cocoa&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;ViewController&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;NSViewController&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{}&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;viewController&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ViewController&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;span class=&#34;bp&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;vc.view.frame = &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;\(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;vc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;view&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;frame&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;It looks like the same as what we do for UIViewController. And it should work like UIViewController.&lt;/p&gt;

&lt;p&gt;However, an exception is thrown, which shows that &amp;lsquo;could not load the nibName&amp;rsquo;. Why?&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;[General] -[NSNib _initWithNibNamed:bundle:options:] could not load the nibName: Demo.ViewController in bundle (null).&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;So, It looks like that NSViewController will not create a default rootView for us. We must create one by ourselves. The key is the &lt;code&gt;loadView&lt;/code&gt;. Just override the loadView() method, then create a NSView instance.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-Swift&#34; data-lang=&#34;Swift&#34;&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-Swift&#34; data-lang=&#34;Swift&#34;&gt;&lt;span class=&#34;kd&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Cocoa&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;ViewController&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;NSViewController&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;kr&#34;&gt;override&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;loadView&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;kc&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;view&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;NSView&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;That&amp;rsquo;s it.&lt;/p&gt;

&lt;p&gt;Now, I have found that macOS development has many differences with iOS. You may encounter many fundamental pitfalls, and when you indeed stumble, be patient. To read the Apple&amp;rsquo;s documentations is you top priority, then Google please.&lt;/p&gt;

&lt;h2 id=&#34;references&#34;&gt;References&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://stackoverflow.com/questions/37526411/instantiate-uiviewcontroller-programmatically-without-nib&#34;&gt;Instantiate a UIViewController without Nib&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://medium.com/hyperoslo/how-to-write-an-nsviewcontroller-without-interface-builder-on-macos-760283648f12&#34;&gt;Instantiate a NSViewController without Nib&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
      
    </item>
    
    <item>
      <title>一道 Swift Quiz</title>
      <link>https://hechen.xyz/post/a-swift-quiz/</link>
      <pubDate>Tue, 14 May 2019 16:01:54 +0800</pubDate>
      
      <guid>https://hechen.xyz/post/a-swift-quiz/</guid>
      
        <description>

&lt;p&gt;这两天在 &lt;a href=&#34;https://twitter.com/krzyzanowskim/status/1127875626579288064?s=12&#34;&gt;Twitter&lt;/a&gt; 上看到一道题目，主要是考察 overload 和 type(of:) 的知识点，本文仅做记录，关于 MetaType 会单独写一篇文章来总结。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;// Swift Quiz

class View {}
class A: View {}
class B: View {}

func add(_ v: View) { print(type(of: v)) }
func add(_ v: A) { print(type(of: v)) }
func add(_ v: B) { print(type(of: v)) }

func build() -&amp;gt; View { return B() }
add(build())

// What is the output?

&amp;#34;View&amp;#34;
&amp;#34;A&amp;#34;
&amp;#34;B&amp;#34;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;这里使用多个 add 函数，实际上是起到了一定的迷惑作用，那针对具备不同静态类型的 add 函数来讲，其重载哪个函数就是依据其传入参数的静态类型而决定，因此在本 Quiz 中 build 函数返回了实例的静态类型即为 View，所以一定是会重载具备 View 类型参数的函数。
而进入函数体内部，主要就是 &lt;code&gt;type(of:)&lt;/code&gt; 方法的执行结果了，而该方法的官方定义里有如下说明：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;func type&amp;lt;T, Metatype&amp;gt;(of value: T) -&amp;gt; Metatype&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;You can use the type(of:) function to find the dynamic type of a value, particularly when the dynamic type is different from the static type. The static type of a value is the known, compile-time type of the value. The dynamic type of a value is the value’s actual type at run-time, which can be a subtype of its concrete type.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;可以看到，&lt;code&gt;type(of:)&lt;/code&gt; 可以获取到当前所传值的动态类型，也就是其原始的宿主类型。对于本例来讲，传入到该方法的值实质上是由 B 类型实例化而来，因此其动态类型应该是 B。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/vB7DuWI.png&#34; alt=&#34;Quiz&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;references&#34;&gt;References&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://developer.apple.com/documentation/swift/2885064-type&#34;&gt;type(of:)&lt;/a&gt;&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>关于 Library 和 Framework</title>
      <link>https://hechen.xyz/post/library_framework/</link>
      <pubDate>Fri, 26 Apr 2019 00:35:30 +0800</pubDate>
      
      <guid>https://hechen.xyz/post/library_framework/</guid>
      
        <description>

&lt;p&gt;Library 和 Framework 的概念大家应该脑海里都有一些，本文旨在讲述下基本概念，没有对每个字节都了如指掌。关于基本的编译过程在 &lt;a href=&#34;https://hechen.xyz/post/xcode-build-system/&#34;&gt;Build Process&lt;/a&gt; 一文中也大概讲述了一些。&lt;/p&gt;

&lt;p&gt;在链接 Library 以及 Framework 之前，我们需要先了解一下 Mach—O。&lt;/p&gt;

&lt;p&gt;提到 Mach-O ，需要明确下 object file（目标文件）的概念，其实质上是指那些由源代码编译之后生成的，还未进行链接的中间文件（比如 Linux 下的 .o 以及 Windows 下的 .obj），它和可执行文件的内容和结构很相似，所以一般上会跟可执行文件格式采用一样的格式存储。&lt;/p&gt;

&lt;p&gt;那在 Unix 系统上的 COFF 是当时发明的在 Unix 表示一个目标文件的存取格式，后来 Linux 基于 COFF 发明了 ELF，而 Windows 基于 COFF 发明了 PE 格式。广义上来说，目标文件与可执行文件几乎一样。在 Linux 下统称为 ELF 文件，Windows 上统称为 PE-COFF 文件，而在 iOS/macOS 上我们的目标文件就是 Mach-O 格式，其在目标文件的大体组成上和其他两种很相似。而 Mach-O 的全称就是 Mach Object 的缩写。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/CUrWruq.png&#34; alt=&#34;目标文件&#34; /&gt;&lt;/p&gt;

&lt;p&gt;我们以 Linux 上 ELF 结构的一张图来大概说明一下情况，不同的源文件通过分类，将代码和数据，以及变量放入不同的职责段，代码段 _TEXT，数据段 _DATA 等。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/ozMscrW.jpg&#34; alt=&#34;ELF&#34; /&gt;&lt;/p&gt;

&lt;p&gt;而 Mach-O 文件格式如下图（源自于 Apple 文档）, 和 ELF 格式类似，其也是将不同职责的代码和数据放置于不同的 Section 段，然后再集中成一个一个的 Segment，而 Load Commands 是用来控制每一个 Segment 是如何被加载的，数据是从哪里取的，等等。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/8p9pwgn.png&#34; alt=&#34;Mach-O&#34; /&gt;&lt;/p&gt;

&lt;p&gt;我们通过将如下代码编译输出成可执行文件来看，&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C&#34; data-lang=&#34;C&#34;&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C&#34; data-lang=&#34;C&#34;&gt;&lt;span class=&#34;c1&#34;&gt;//
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//  main.m
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//  MachO
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//  Created by chen he on 2019/4/22.
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//  Copyright © 2019 chen he. All rights reserved.
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#import &amp;lt;stdio.h&amp;gt;
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;
&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;argc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;char&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;argv&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[])&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;printf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Hello World.&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;通过 clang 工具套件编译源文件生成可执行文件。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-Shell&#34; data-lang=&#34;Shell&#34;&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-Shell&#34; data-lang=&#34;Shell&#34;&gt;// output the main.o
clang -c main.m
// link main.o with c lib
// default output file is a.out, you can specify another name with -o
clang main.o -Wl,&lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;xcrun --show-sdk-path&lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;/usr/lib/libSystem.B.tbd&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;接着可以使用 MachOView 来查看刚才 a.out 以及 main.o 文件。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;MachOView 是一款开源软件，用以查看目标文件格式的，不过已经好几年没有更新了，所有有的 Load Command 识别不出。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/ehG4guP.png&#34; alt=&#34;a.out 的内容&#34; /&gt;&lt;/p&gt;

&lt;p&gt;我们再看看 main.o 这个目标文件的结构是怎么样的。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/tOzXqC1.png&#34; alt=&#34;main.o 的内容&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;library&#34;&gt;Library&lt;/h3&gt;

&lt;p&gt;在 &lt;a href=&#34;https://hechen.xyz/post/xcode-build-system/&#34;&gt;这篇文章&lt;/a&gt; 中说明了，每个源文件最终都会生成对应的目标文件，当工程项目变大之后，我们希望能够将具体协同工作的单一组件内的目标文件一起进行交付，对于功能稳定的代码无需参与再次编译的过程，我们需要将同一个组件内部的所有目标文件归拢到一起，这也是初期库（Library） 出现的由来。简单而言，库就是一堆目标文件的集合。&lt;/p&gt;

&lt;p&gt;通过简单的 ar 命令即可将多个 .o 文件整合成一个 .a 文件，同时使用 ranlib 命令更新静态库 .a 的符号索引。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;ar -r libfoo.a foo.o bar.o baz.o
ranlib libfoo.a&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h3 id=&#34;static-library&#34;&gt;Static Library&lt;/h3&gt;

&lt;p&gt;关于静态和动态的由来，是因为链接过程的不同而产生，基于静态链接的库被称作静态库，基于动态链接的库被称作动态库（共享库）。&lt;/p&gt;

&lt;p&gt;静态库实质上是目标文件的集合。它是把很多目标文件捆绑在一起形成一个文件，再加上一些索引，你可以简单地把它理解为一个包含有很多目标文件的文件包。也就是上面我们介绍的 .a 文件。&lt;/p&gt;

&lt;p&gt;静态库的存在形式使得不同的成员开发者和部门都能够独立的自行开发自己的功能功能和程序模块，在一定阶段和程度上是大大提高了开发效率的，但是静态库也有一些问题：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;浪费内存和磁盘空间&lt;/li&gt;
&lt;li&gt;模块更新难&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;以上方的 HelloWorld 程序为例，其中 printf 的符号是定义在 C 的标准库文件中的，如果要进行静态链接，也就是 C 的标准库要以静态库的方式参与链接到程序内部，假如平均一个 C 程序会使用到大概 1MB 的空间（磁盘以及内存），如果我们操作系统运行 100 个这样简单的程序就需要近 100MB 的空间，这个不太可取，而且这些标准库本身所有的程序都需要一人带一份，不太可取。&lt;/p&gt;

&lt;p&gt;另外一个问题是模块更新问题，因为最终要在链接阶段直接链接到可执行文件中，因此一旦某个模块发生变化，我们需要将该静态库重新进行编译，链接，发布，而且整个可执行文件都做了变更，因此需要完整的替换掉当下的可执行文件。&lt;/p&gt;

&lt;p&gt;例如一个程序如果包含 20 个模块，每个模块 1 MB，每次更新任何一个模块，用户需要重新获取 20MB 的程序。&lt;/p&gt;

&lt;p&gt;要想解决以上两个问题，最简单的办法就是将程序的每个模块隔离开，形成单独的文件，而不再将其都混合在一起。简单的来说，就是不再对那些组成程序的目标文件进行链接，而是等到程序用的时候再实时的进行链接，这个也是动态链接的基本思想，而基于动态链接产生的 Library 支持，即为共享库（动态链接库）&lt;/p&gt;

&lt;h3 id=&#34;dynamic-library&#34;&gt;Dynamic Library&lt;/h3&gt;

&lt;p&gt;动态链接最大的变化在于可执行程序和动态链接的目标文件是独立的两个文件，只是在程序初始执行的目标文件（比如 main 入口所在的文件）内部持有动态链接库的符号，当真正运行起来，需要用到对应的符号时，链接器才去查找对应目标文件，然后链接执行。&lt;/p&gt;

&lt;p&gt;当运行程序需要更新的时候，我们不需要完整的编译二进制可执行文件，而只需要在动态库的接口不变的前提下，仅仅更新那部分包含了所需升级功能的动态库而已。这一点，在 Windows 系统上体现的尤为明显。&lt;/p&gt;

&lt;p&gt;当然动态链接也存在自身的问题，很常见的一个问题，当程序所使用的其中一个模块发生更新之后，很容易造成库接口不兼容导致程序无法运行，这也是为什么有的时候你更新完系统，原来使用好好的 App 打开发生闪退或者某个功能无法使用了的缘故。&lt;/p&gt;

&lt;p&gt;另外一个缺点就是，由于所需调用的符号不再和可执行文件在一起，在进行方法调用的时候，过程要比之前复杂的多，要先找对应的动态库文件，如果在内存中不存在，还需要再去磁盘中实时加载，导致动态库的方法调用时间要比静态链接的情况下慢。&lt;/p&gt;

&lt;p&gt;在 Mac / iOS 上所有的动态库都是通过 dyld 来进行动态加载的，这里不详细说明了，大概列一下动态库的加载顺序：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;首先会加载系统级别的dylib, 目录在设备的&lt;code&gt;/usr/lib/&lt;/code&gt;, 文件:&lt;code&gt;libsqlite3.dylib、libc++.1.dylib...&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;然后加载系统级别的framework, 目录在设备的&lt;code&gt;/System/Library/Frameworks&lt;/code&gt;, 文件:&lt;code&gt;Foundation.framework&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;再引入runtime、gcd存放的dylib, 目录在设备的&lt;code&gt;/usr/lib/&lt;/code&gt;, 文件:&lt;code&gt;libSystem.B.dylib、libobjc.A.dylib&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;再引入自己注入的dylib, &lt;code&gt;@executable_path/&lt;/code&gt;(目录存放在当前可执行文件底下)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;而对于 App 来讲，实际上的路径是通过 @rpath 来指定的，该符号说白了就是占位符，当你的 App 成功安装到 iOS 系统之后，@rpath 就是该 App 的安装路径，以某个 iap 文件内部的可执行文件为例，使用 otool 查看其依赖的动态库如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-Shell&#34; data-lang=&#34;Shell&#34;&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;28
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;29
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;30
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;31
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;32
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;33
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;34
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;35
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;36
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;37
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;38
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;39
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;40
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;41
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;42
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;43
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;44
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;45
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;46
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;47
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;48
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;49
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;50
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;51
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;52
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;53
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;54
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;55
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;56
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;57
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;58
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;59
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;60
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;61
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;62
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;63
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;64
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;65
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;66
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;67
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;68
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;69
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;70
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;71
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;72
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;73
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;74
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;75
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;76
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;77
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;78
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;79
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;80
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;81
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;82
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;83
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;84
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;85
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;86
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;87
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;88
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;89
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;90
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-Shell&#34; data-lang=&#34;Shell&#34;&gt;    otool -L osee2unifiedRelease.app/osee2unifiedRelease
    
    
    osee2unifiedRelease.app/osee2unifiedRelease:
    	/usr/lib/libbz2.1.0.dylib &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;compatibility version &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;.0.0, current version &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;.0.5&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
    	/usr/lib/libc++.1.dylib &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;compatibility version &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;.0.0, current version &lt;span class=&#34;m&#34;&gt;400&lt;/span&gt;.9.4&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
    	/usr/lib/libiconv.2.dylib &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;compatibility version &lt;span class=&#34;m&#34;&gt;7&lt;/span&gt;.0.0, current version &lt;span class=&#34;m&#34;&gt;7&lt;/span&gt;.0.0&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
    	/usr/lib/libicucore.A.dylib &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;compatibility version &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;.0.0, current version &lt;span class=&#34;m&#34;&gt;62&lt;/span&gt;.1.0&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
    	/usr/lib/libresolv.9.dylib &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;compatibility version &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;.0.0, current version &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;.0.0&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
    	/usr/lib/libsqlite3.dylib &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;compatibility version &lt;span class=&#34;m&#34;&gt;9&lt;/span&gt;.0.0, current version &lt;span class=&#34;m&#34;&gt;274&lt;/span&gt;.20.0&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
    	/usr/lib/libxml2.2.dylib &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;compatibility version &lt;span class=&#34;m&#34;&gt;10&lt;/span&gt;.0.0, current version &lt;span class=&#34;m&#34;&gt;10&lt;/span&gt;.9.0&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
    	/usr/lib/libz.1.dylib &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;compatibility version &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;.0.0, current version &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;.2.11&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
    	/System/Library/Frameworks/AVFoundation.framework/AVFoundation &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;compatibility version &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;.0.0, current version &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt;.0.0&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
    	/System/Library/Frameworks/Accelerate.framework/Accelerate &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;compatibility version &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;.0.0, current version &lt;span class=&#34;m&#34;&gt;4&lt;/span&gt;.0.0&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
    	/System/Library/Frameworks/AdSupport.framework/AdSupport &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;compatibility version &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;.0.0, current version &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;.0.0&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
    	/System/Library/Frameworks/AudioToolbox.framework/AudioToolbox &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;compatibility version &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;.0.0, current version &lt;span class=&#34;m&#34;&gt;492&lt;/span&gt;.0.0&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
    	/System/Library/Frameworks/CFNetwork.framework/CFNetwork &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;compatibility version &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;.0.0, current version &lt;span class=&#34;m&#34;&gt;975&lt;/span&gt;.0.3&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
    	/System/Library/Frameworks/CoreFoundation.framework/CoreFoundation &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;compatibility version &lt;span class=&#34;m&#34;&gt;150&lt;/span&gt;.0.0, current version &lt;span class=&#34;m&#34;&gt;1560&lt;/span&gt;.10.0&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
    	/System/Library/Frameworks/CoreGraphics.framework/CoreGraphics &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;compatibility version &lt;span class=&#34;m&#34;&gt;64&lt;/span&gt;.0.0, current version &lt;span class=&#34;m&#34;&gt;1245&lt;/span&gt;.9.2&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
    	/System/Library/Frameworks/CoreLocation.framework/CoreLocation &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;compatibility version &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;.0.0, current version &lt;span class=&#34;m&#34;&gt;2245&lt;/span&gt;.8.12&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
    	/System/Library/Frameworks/CoreMotion.framework/CoreMotion &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;compatibility version &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;.0.0, current version &lt;span class=&#34;m&#34;&gt;2245&lt;/span&gt;.8.12&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
    	/System/Library/Frameworks/CoreSpotlight.framework/CoreSpotlight &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;compatibility version &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;.0.0, current version &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;.0.0&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
    	/System/Library/Frameworks/CoreTelephony.framework/CoreTelephony &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;compatibility version &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;.0.0, current version &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;.0.0&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
    	/System/Library/Frameworks/CoreText.framework/CoreText &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;compatibility version &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;.0.0, current version &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;.0.0&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
    	/System/Library/Frameworks/ExternalAccessory.framework/ExternalAccessory &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;compatibility version &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;.0.0, current version &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;.0.0&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
    	/System/Library/Frameworks/Foundation.framework/Foundation &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;compatibility version &lt;span class=&#34;m&#34;&gt;300&lt;/span&gt;.0.0, current version &lt;span class=&#34;m&#34;&gt;1560&lt;/span&gt;.10.0&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
    	/System/Library/Frameworks/GLKit.framework/GLKit &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;compatibility version &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;.0.0, current version &lt;span class=&#34;m&#34;&gt;103&lt;/span&gt;.2.0&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
    	/System/Library/Frameworks/ImageIO.framework/ImageIO &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;compatibility version &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;.0.0, current version &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;.0.0&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
    	/System/Library/Frameworks/MediaPlayer.framework/MediaPlayer &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;compatibility version &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;.0.0, current version &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;.0.0&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
    	/System/Library/Frameworks/MobileCoreServices.framework/MobileCoreServices &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;compatibility version &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;.0.0, current version &lt;span class=&#34;m&#34;&gt;935&lt;/span&gt;.2.0&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
    	/System/Library/Frameworks/OpenGLES.framework/OpenGLES &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;compatibility version &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;.0.0, current version &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;.0.0&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
    	/System/Library/Frameworks/Photos.framework/Photos &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;compatibility version &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;.0.0, current version &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;.0.0&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
    	/System/Library/Frameworks/QuartzCore.framework/QuartzCore &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;compatibility version &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;.2.0, current version &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;.11.0&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
    	/System/Library/Frameworks/Security.framework/Security &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;compatibility version &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;.0.0, current version &lt;span class=&#34;m&#34;&gt;58286&lt;/span&gt;.222.2&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
    	/System/Library/Frameworks/SystemConfiguration.framework/SystemConfiguration &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;compatibility version &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;.0.0, current version &lt;span class=&#34;m&#34;&gt;963&lt;/span&gt;.200.27&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
    	/System/Library/Frameworks/UIKit.framework/UIKit &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;compatibility version &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;.0.0, current version &lt;span class=&#34;m&#34;&gt;61000&lt;/span&gt;.0.0&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
    	@rpath/VideoEdit.framework/VideoEdit &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;compatibility version &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;.0.0, current version &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;.0.0&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
    	@rpath/VideoPlayer.framework/VideoPlayer &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;compatibility version &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;.0.0, current version &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;.0.0&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
    	/System/Library/Frameworks/VideoToolbox.framework/VideoToolbox &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;compatibility version &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;.0.0, current version &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;.0.0&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
    	@rpath/ZmFFmpeg.framework/ZmFFmpeg &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;compatibility version &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;.0.0, current version &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;.0.0&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
    	@rpath/du.framework/du &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;compatibility version &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;.0.0, current version &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;.0.0&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
    	/System/Library/Frameworks/Metal.framework/Metal &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;compatibility version &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;.0.0, current version &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;.0.0&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
    	/System/Library/Frameworks/CoreMedia.framework/CoreMedia &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;compatibility version &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;.0.0, current version &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;.0.0&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
    	/System/Library/Frameworks/WebKit.framework/WebKit &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;compatibility version &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;.0.0, current version &lt;span class=&#34;m&#34;&gt;606&lt;/span&gt;.2.104&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
    	/System/Library/Frameworks/Social.framework/Social &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;compatibility version &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;.0.0, current version &lt;span class=&#34;m&#34;&gt;87&lt;/span&gt;.0.0&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
    	/System/Library/Frameworks/Accounts.framework/Accounts &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;compatibility version &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;.0.0, current version &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;.0.0&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
    	/System/Library/Frameworks/MessageUI.framework/MessageUI &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;compatibility version &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;.0.0, current version &lt;span class=&#34;m&#34;&gt;3445&lt;/span&gt;.100.42&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
    	/System/Library/Frameworks/AddressBook.framework/AddressBook &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;compatibility version &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;.0.0, current version &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;.0.0&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
    	/System/Library/Frameworks/StoreKit.framework/StoreKit &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;compatibility version &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;.0.0, current version &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;.0.0&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
    	/usr/lib/libobjc.A.dylib &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;compatibility version &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;.0.0, current version &lt;span class=&#34;m&#34;&gt;228&lt;/span&gt;.0.0&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
    	/usr/lib/libSystem.B.dylib &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;compatibility version &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;.0.0, current version &lt;span class=&#34;m&#34;&gt;1252&lt;/span&gt;.200.5&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
    	/System/Library/Frameworks/AssetsLibrary.framework/AssetsLibrary &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;compatibility version &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;.0.0, current version &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;.0.0&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
    	/System/Library/Frameworks/Contacts.framework/Contacts &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;compatibility version &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;.0.0, current version &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;.0.0&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
    	/System/Library/Frameworks/CoreData.framework/CoreData &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;compatibility version &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;.0.0, current version &lt;span class=&#34;m&#34;&gt;866&lt;/span&gt;.2.0&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
    	/System/Library/Frameworks/CoreImage.framework/CoreImage &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;compatibility version &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;.0.0, current version &lt;span class=&#34;m&#34;&gt;5&lt;/span&gt;.0.0&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
    	/System/Library/Frameworks/CoreVideo.framework/CoreVideo &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;compatibility version &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;.2.0, current version &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;.5.0&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
    	/System/Library/Frameworks/EventKit.framework/EventKit &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;compatibility version &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;.0.0, current version &lt;span class=&#34;m&#34;&gt;100&lt;/span&gt;.0.0&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
    	/System/Library/Frameworks/LocalAuthentication.framework/LocalAuthentication &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;compatibility version &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;.0.0, current version &lt;span class=&#34;m&#34;&gt;425&lt;/span&gt;.222.1&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
    	/System/Library/Frameworks/MapKit.framework/MapKit &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;compatibility version &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;.0.0, current version &lt;span class=&#34;m&#34;&gt;14&lt;/span&gt;.0.0&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
    	/System/Library/Frameworks/MetalKit.framework/MetalKit &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;compatibility version &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;.0.0, current version &lt;span class=&#34;m&#34;&gt;113&lt;/span&gt;.0.0&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
    	/System/Library/Frameworks/NetworkExtension.framework/NetworkExtension &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;compatibility version &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;.0.0, current version &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;.0.0&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
    	/System/Library/Frameworks/PassKit.framework/PassKit &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;compatibility version &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;.0.0, current version &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;.0.0&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
    	/System/Library/Frameworks/SafariServices.framework/SafariServices &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;compatibility version &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;.0.0, current version &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;.0.0&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
    	/System/Library/Frameworks/UserNotifications.framework/UserNotifications &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;compatibility version &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;.0.0, current version &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;.0.0&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
    	/System/Library/Frameworks/iAd.framework/iAd &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;compatibility version &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;.0.0, current version &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;.0.0&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
    	@rpath/libswiftAVFoundation.dylib &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;compatibility version &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;.0.0, current version &lt;span class=&#34;m&#34;&gt;1000&lt;/span&gt;.11.42&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
    	@rpath/libswiftAccelerate.dylib &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;compatibility version &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;.0.0, current version &lt;span class=&#34;m&#34;&gt;1000&lt;/span&gt;.11.42&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
    	@rpath/libswiftContacts.dylib &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;compatibility version &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;.0.0, current version &lt;span class=&#34;m&#34;&gt;1000&lt;/span&gt;.11.42&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
    	@rpath/libswiftCore.dylib &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;compatibility version &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;.0.0, current version &lt;span class=&#34;m&#34;&gt;1000&lt;/span&gt;.11.42&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
    	@rpath/libswiftCoreAudio.dylib &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;compatibility version &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;.0.0, current version &lt;span class=&#34;m&#34;&gt;1000&lt;/span&gt;.11.42&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
    	@rpath/libswiftCoreData.dylib &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;compatibility version &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;.0.0, current version &lt;span class=&#34;m&#34;&gt;1000&lt;/span&gt;.11.42&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
    	@rpath/libswiftCoreFoundation.dylib &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;compatibility version &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;.0.0, current version &lt;span class=&#34;m&#34;&gt;1000&lt;/span&gt;.11.42&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
    	@rpath/libswiftCoreGraphics.dylib &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;compatibility version &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;.0.0, current version &lt;span class=&#34;m&#34;&gt;1000&lt;/span&gt;.11.42&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
    	@rpath/libswiftCoreImage.dylib &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;compatibility version &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;.0.0, current version &lt;span class=&#34;m&#34;&gt;1000&lt;/span&gt;.11.42&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
    	@rpath/libswiftCoreLocation.dylib &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;compatibility version &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;.0.0, current version &lt;span class=&#34;m&#34;&gt;1000&lt;/span&gt;.11.42&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
    	@rpath/libswiftCoreMedia.dylib &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;compatibility version &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;.0.0, current version &lt;span class=&#34;m&#34;&gt;1000&lt;/span&gt;.11.42&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
    	@rpath/libswiftDarwin.dylib &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;compatibility version &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;.0.0, current version &lt;span class=&#34;m&#34;&gt;1000&lt;/span&gt;.11.42&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
    	@rpath/libswiftDispatch.dylib &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;compatibility version &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;.0.0, current version &lt;span class=&#34;m&#34;&gt;1000&lt;/span&gt;.11.42&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
    	@rpath/libswiftFoundation.dylib &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;compatibility version &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;.0.0, current version &lt;span class=&#34;m&#34;&gt;1000&lt;/span&gt;.11.42&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
    	@rpath/libswiftGLKit.dylib &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;compatibility version &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;.0.0, current version &lt;span class=&#34;m&#34;&gt;1000&lt;/span&gt;.11.42&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
    	@rpath/libswiftMapKit.dylib &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;compatibility version &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;.0.0, current version &lt;span class=&#34;m&#34;&gt;1000&lt;/span&gt;.11.42&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
    	@rpath/libswiftMediaPlayer.dylib &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;compatibility version &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;.0.0, current version &lt;span class=&#34;m&#34;&gt;1000&lt;/span&gt;.11.42&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
    	@rpath/libswiftMetal.dylib &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;compatibility version &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;.0.0, current version &lt;span class=&#34;m&#34;&gt;1000&lt;/span&gt;.11.42&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
    	@rpath/libswiftModelIO.dylib &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;compatibility version &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;.0.0, current version &lt;span class=&#34;m&#34;&gt;1000&lt;/span&gt;.11.42&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
    	@rpath/libswiftObjectiveC.dylib &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;compatibility version &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;.0.0, current version &lt;span class=&#34;m&#34;&gt;1000&lt;/span&gt;.11.42&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
    	@rpath/libswiftPhotos.dylib &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;compatibility version &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;.0.0, current version &lt;span class=&#34;m&#34;&gt;1000&lt;/span&gt;.11.42&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
    	@rpath/libswiftQuartzCore.dylib &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;compatibility version &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;.0.0, current version &lt;span class=&#34;m&#34;&gt;1000&lt;/span&gt;.11.42&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
    	@rpath/libswiftUIKit.dylib &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;compatibility version &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;.0.0, current version &lt;span class=&#34;m&#34;&gt;1000&lt;/span&gt;.11.42&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
    	@rpath/libswiftos.dylib &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;compatibility version &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;.0.0, current version &lt;span class=&#34;m&#34;&gt;1000&lt;/span&gt;.11.42&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
    	@rpath/libswiftsimd.dylib &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;compatibility version &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;.0.0, current version &lt;span class=&#34;m&#34;&gt;1000&lt;/span&gt;.11.42&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;dyld 是开源的，感兴趣可以一看。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/opensource-apple/dyld&#34;&gt;opensource-apple/dyld&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;framework&#34;&gt;Framework&lt;/h3&gt;

&lt;p&gt;在库刚出现的时候，我们将自己创建的 Library 提供给对方的时候，不仅需要将 .a 文件提供给对方，还需要同时提供 Header，用以开发人员在高级语言层面能够直观的使用该库提供的功能。后来，我们的模块越来越大，不仅仅包含代码文件，还加入了资源文件，Apple 引入了 framework 的概念用来将一个独立功能模块所需提供的内容打包提供。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;A framework is a bundle (a structured directory) that contains a dynamic shared library along with associated resources, such as nib files, image files, and header files.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;所以，你要明白，framework 本质上只是一种 Bundle 存在的形式，类似于一种目录结构，其并无动静之分。 内部包含的库文件，如果是静态库，其被称作为静态 Framework，如果内部为动态库，就被称作动态 Framework。由于官方在 iOS 上推出 Framework 的时候直接以 Dynamic Framework 的形式推出，通过 Xcode 创建的 Target 我们也可以了解。&lt;/p&gt;

&lt;h3 id=&#34;text-based-dylib-stubs&#34;&gt;Text Based .dylib Stubs&lt;/h3&gt;

&lt;p&gt;自 Xcode 7 引入，目前未查找到官方正式文档说明，但是在官方论坛中有 Apple 官方人员针对 .tbd 文件的回应如下：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;For those who are curious, the .tbd files are new &amp;ldquo;text-based stub libraries&amp;rdquo;, that provide a much more compact version of the stub libraries for use in the SDK, and help to significantly reduce its download size.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;以  libc++ 为例，在我们 iOS 开发过程中链接的 libc++ 的动态库是通过 libc++.tbd 引入的，可以查到其原始路径位于每个 SDK 文件夹下。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;    /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator.sdk/usr/lib/libc++.tbd&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;使用文本编辑器即可打开查看：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-Shell&#34; data-lang=&#34;Shell&#34;&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;28
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;29
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-Shell&#34; data-lang=&#34;Shell&#34;&gt;--- !tapi-tbd-v3

   archs:           &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt; i386, x86_64 &lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;
    uuids:           &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;i386: A9FCC99A-209C-348E-BB79-0A29A5FCB82B&amp;#39;&lt;/span&gt;, &lt;span class=&#34;s1&#34;&gt;&amp;#39;x86_64: 66B692F1-FA7E-3CBB-817A-73A7FE29A765&amp;#39;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;
    platform:        ios
    install-name:    &lt;span class=&#34;s1&#34;&gt;&amp;#39;/usr/lib/libc++.1.dylib&amp;#39;&lt;/span&gt;
    current-version: &lt;span class=&#34;m&#34;&gt;400&lt;/span&gt;.9.4
    objc-constraint: none
    exports:         
      - archs:           &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt; i386 &lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;
        symbols:         &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt; __ZNKSt3__18messagesIcE6do_getEiiiRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE, 
                           __ZNKSt3__18messagesIcE8do_closeEi, __ZNKSt3__18messagesIwE6do_getEiiiRKNS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEE, 
                           __ZNKSt3__18messagesIwE8do_closeEi, __ZNSt3__111this_thread9sleep_forERKNS_6chrono8durationIxNS_5ratioILx1ELx1000000000EEEEE, 
                           __ZNSt3__112strstreambuf6__initEPciS1_, __ZNSt3__112strstreambufC1EPKai, 
                           __ZNSt3__112strstreambufC1EPKci, __ZNSt3__112strstreambufC1EPKhi, 
                           __ZNSt3__112strstreambufC1EPaiS1_, __ZNSt3__112strstreambufC1EPciS1_, 
                           __ZNSt3__112strstreambufC1EPhiS1_, __ZNSt3__112strstreambufC1Ei, 
                           __ZNSt3__112strstreambufC2EPKai, __ZNSt3__112strstreambufC2EPKci, 
                           __ZNSt3__112strstreambufC2EPKhi, __ZNSt3__112strstreambufC2EPaiS1_, 
                           __ZNSt3__112strstreambufC2EPciS1_, __ZNSt3__112strstreambufC2EPhiS1_, 
                           __ZNSt3__112strstreambufC2Ei, __ZNSt3__113basic_istreamIcNS_11char_traitsIcEEE3getEPci, 
                           __ZNSt3__113basic_istreamIcNS_11char_traitsIcEEE3getEPcic, 
                           __ZNSt3__113basic_istreamIcNS_11char_traitsIcEEE4readEPci, 
                           __ZNSt3__113basic_istreamIcNS_11char_traitsIcEEE6ignoreEii, 
                           __ZNSt3__113basic_istreamIcNS_11char_traitsIcEEE7getlineEPci, 
                           __ZNSt3__113basic_istreamIcNS_11char_traitsIcEEE7getlineEPcic, 
                           __ZNSt3__113basic_istreamIcNS_11char_traitsIcEEE8readsomeEPci, 
                           __ZNSt3__113basic_istreamIwNS_11char_traitsIwEEE3getEPwi, 
                           __ZNSt3__113basic_istreamIwNS_11char_traitsIwEEE3getEPwiw,&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;其中将本身的动态链接库所提供出的符号（函数，全局变量等）列出，因为在 macOS 以及 iOS 中系统目录下已经集成了这些动态库，因为为了避免不必要的下载和提供重复的动态链接库，因而提供了 tbd 这种格式文件用来做桥接。实质上当真正可执行文件进行链接的时候，会加载系统原有的动态链接库，这个具体的动态链接库位置由 &lt;code&gt;install-name&lt;/code&gt; 给出。&lt;/p&gt;

&lt;p&gt;简而言之，tbd 是 Apple 用来减小 SDK 体积大小所提供的中间文件。&lt;/p&gt;

&lt;p&gt;所以，当你下载 Xcode 的时候，其自带的 SDK 中包含的动态链接库大部分均为 tbd 格式，而真正我们运行起来可执行文件之后加载的动态链接库会直接使用系统目录下的（无论是 iOS 还是 macOS）。&lt;/p&gt;

&lt;h1 id=&#34;参考链接&#34;&gt;参考链接&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/gdbinit/MachOView&#34;&gt;MachOView&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.objc.io/issues/6-build-tools/mach-o-executables/&#34;&gt;Mach-O Executables&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://lowlevelbits.org/parsing-mach-o-files/&#34;&gt;PARSING MACH-O FILES&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
      
    </item>
    
    <item>
      <title>Build Process</title>
      <link>https://hechen.xyz/post/xcode-build-system/</link>
      <pubDate>Thu, 25 Apr 2019 11:30:30 +0800</pubDate>
      
      <guid>https://hechen.xyz/post/xcode-build-system/</guid>
      
        <description>

&lt;p&gt;编程语言的处理过程大致会有五个阶段，其每个阶段均有对应的工具：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;预处理器 Preprocessor&lt;/li&gt;
&lt;li&gt;编译器 Compiler&lt;/li&gt;
&lt;li&gt;汇编器 Assembler&lt;/li&gt;
&lt;li&gt;链接器 Linker&lt;/li&gt;
&lt;li&gt;加载器 Loader&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;以下，我们以一个简单的源文件，来看看具体这几个步骤都做了哪些事情。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;c1&#34;&gt;//
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//  main.m
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//  MachO
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//  Created by chen he on 2019/4/22.
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//  Copyright © 2019 chen he. All rights reserved.
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#import &amp;lt;stdio.h&amp;gt;
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;
&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;argc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;char&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;argv&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[])&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;printf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Hello World.&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h2 id=&#34;预处理器-preprocessor&#34;&gt;预处理器 Preprocessor&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;符号化&lt;/li&gt;
&lt;li&gt;宏定义展开&lt;/li&gt;
&lt;li&gt;头文件引入展开&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;在命令行执行如下命令，我们导出输出到本地文件&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C&#34; data-lang=&#34;C&#34;&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C&#34; data-lang=&#34;C&#34;&gt;&lt;span class=&#34;n&#34;&gt;xcrun&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;clang&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;E&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;helloworld&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;c&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;preprocessed&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;txt&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;打开 preprocessed.txt 看输出如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C&#34; data-lang=&#34;C&#34;&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C&#34; data-lang=&#34;C&#34;&gt;&lt;span class=&#34;cp&#34;&gt;# 1 &amp;#34;helloworld.c&amp;#34;
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;# 1 &amp;#34;&amp;lt;built-in&amp;gt;&amp;#34; 1
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;# 1 &amp;#34;&amp;lt;built-in&amp;gt;&amp;#34; 3
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;# 361 &amp;#34;&amp;lt;built-in&amp;gt;&amp;#34; 3
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;# 1 &amp;#34;&amp;lt;command line&amp;gt;&amp;#34; 1
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;# 1 &amp;#34;&amp;lt;built-in&amp;gt;&amp;#34; 2
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;# 1 &amp;#34;helloworld.c&amp;#34; 2
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;# 1 &amp;#34;/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.14.sdk/usr/include&lt;/span&gt;&lt;span class=&#34;cpf&#34;&gt;/stdio.h&amp;#34; 1 3 4&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;# 64 &amp;#34;/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.14.sdk/usr/include&lt;/span&gt;&lt;span class=&#34;cpf&#34;&gt;/stdio.h&amp;#34; 3 4&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;# 1 &amp;#34;/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.14.sdk/usr/include&lt;/span&gt;&lt;span class=&#34;cpf&#34;&gt;/_stdio.h&amp;#34; 1 3 4&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;# 68 &amp;#34;/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.14.sdk/usr/include&lt;/span&gt;&lt;span class=&#34;cpf&#34;&gt;/_stdio.h&amp;#34; 3 4&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;# 1 &amp;#34;/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.14.sdk/usr/include&lt;/span&gt;&lt;span class=&#34;cpf&#34;&gt;/sys/cdefs.h&amp;#34; 1 3 4&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// 省略一万字
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;extern&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;__vsnprintf_chk&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;char&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;kr&#34;&gt;restrict&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;size_t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;size_t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
       &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;char&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;kr&#34;&gt;restrict&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;va_list&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;# 412 &amp;#34;/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.14.sdk/usr/include&lt;/span&gt;&lt;span class=&#34;cpf&#34;&gt;/stdio.h&amp;#34; 2 3 4&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;# 2 &amp;#34;helloworld.c&amp;#34; 2
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;
&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;argc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;char&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;argv&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[])&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;printf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Hello World!&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;可以看到预编译处理之后的源文件，仅仅只有几行的源文件进行头文件展开之后能增加到几百行，而我们仅仅只引入了 &lt;code&gt;stdio.h&lt;/code&gt; 一个头文件。当然，你可以使用 Xcode 来执行预处理命令。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/vmwexNC.png&#34; alt=&#34;xcode_preprocess&#34; /&gt;&lt;/p&gt;

&lt;p&gt;而在 Swift 提出的同时，Module 的概念被同时引入 C 系语言中，在 Xcode 的 &lt;code&gt;build settings&lt;/code&gt; 中能找到其开关。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/lUGiInP.png&#34; alt=&#34;enable_module&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Modules 默认是开启的（当然这个开关也只是针对 C 系语言，Swift 原生就是以 Module 形式存在的），大家可以在开启的情况下再进行预处理命令看结果，已经由原来的 548 行减少到了 14 行，这也是 &lt;code&gt;LLVM&lt;/code&gt; 极力推荐 Module 的其中一个原因，大大减少了预编译处理时间。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C&#34; data-lang=&#34;C&#34;&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C&#34; data-lang=&#34;C&#34;&gt;&lt;span class=&#34;cp&#34;&gt;# 1 &amp;#34;/Users/chen/Desktop/Share/Code/MachO/MachO/1/helloworld.m&amp;#34;
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;# 1 &amp;#34;&amp;lt;built-in&amp;gt;&amp;#34; 1
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;# 1 &amp;#34;&amp;lt;built-in&amp;gt;&amp;#34; 3
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;# 374 &amp;#34;&amp;lt;built-in&amp;gt;&amp;#34; 3
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;# 1 &amp;#34;&amp;lt;command line&amp;gt;&amp;#34; 1
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;# 1 &amp;#34;&amp;lt;built-in&amp;gt;&amp;#34; 2
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;# 1 &amp;#34;/Users/chen/Desktop/Share/Code/MachO/MachO/1/helloworld.m&amp;#34; 2
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;# 10 &amp;#34;/Users/chen/Desktop/Share/Code/MachO/MachO/1/helloworld.m&amp;#34;
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;@&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Darwin&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;libc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;argc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;char&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;argv&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[])&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;printf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Hello World.&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;当进行预处理完成之后，下一步就是基于展开的源码进行 AST 语法树解析，生成中间代码，并且输出目标机器代码的过程。这就是编译器做的事情。&lt;/p&gt;

&lt;h2 id=&#34;编译器-compiler&#34;&gt;编译器 Compiler&lt;/h2&gt;

&lt;p&gt;编译器自身就是个二进制程序，用来将代码源文件转换成语义上完全一致的等价语言的，该等价语言就是机器码（machine code）。目前在 Apple 的生态里完成这件事情的就是 LLVM（出现就是为了替换掉 GCC）。我们平时所说的编译器实质上是一个广义上的概念，其还包括编译器前端，中间代码生成器，代码优化器，编译器后端。&lt;/p&gt;

&lt;p&gt;以目前 Apple 生态下编译器（核心是 LLVM 套件）进行细化之后，可以看到详细的划分阶段如下所示。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/fTwjs0q.png&#34; alt=&#34;LLVM&#34; /&gt;&lt;/p&gt;

&lt;p&gt;其中 Clang 以及 swiftc / swift 实质上是 LLVM 编译链条中的前端，虽然是前端，但是目前工具集本身已经内置了一些注入汇编器，代码优化等功能。&lt;/p&gt;

&lt;p&gt;无论是 Clang 还是 swiftc 最终都会在编译前端将源文件生成中间代码 LLVM Intermediate representation （LLVM IR），然后会经历中间代码优化等阶段，最后交由汇编器生成对应目标指令集的目标文件。&lt;/p&gt;

&lt;p&gt;Xcode 使用两种不同的编译器前端，一种是针对 Objective-C/Objective-C++ 或者 C/C++ 代码使用的，另一种就是在 Swift 出现之后针对 Swift 语言使用的。前者就是 clang，后者是 swiftc / swift。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/kN76TgI.png&#34; alt=&#34;Clang-Swiftc&#34; /&gt;&lt;/p&gt;

&lt;p&gt;因为 swift 语言本身是没有预处理器的，因此忽略前一步。在预编译阶段，我使用了 Clang 作为演示，而 Swift 文件是无需进行预编译处理的。最终编译器生成的文件，称之为目标文件，在 Apple 平台中以特殊的格式存在，这种格式就是 &lt;code&gt;Mach-O&lt;/code&gt; 格式，下文会讲。
而每个目标文件中都有暴露给其他目标文件所使用的符号，这些也就是外部符号，这些符号被管理起来，以一个符号表的形式存在，对于变量和函数来说，其符号表中的 Key 就是这些变量和函数的名字，而 Value 就是其在目标文件中的地址。&lt;/p&gt;

&lt;h2 id=&#34;汇编器-assembler&#34;&gt;汇编器 Assembler&lt;/h2&gt;

&lt;p&gt;汇编器实际上是将中间过程生成的中间代码翻译成指定机器指令集的汇编代码，其实 Clang 工具集中已经集成了&lt;/p&gt;

&lt;h2 id=&#34;链接器-linker&#34;&gt;链接器 Linker&lt;/h2&gt;

&lt;p&gt;每个源文件就按照上面的步骤，生成了一个一个我们称之为目标文件的二进制，接下来我们需要将所有的目标文件整合成一个可执行文件。比如上面的例子中，我们有两个文件，Foo.o 以及 main.o 文件，当然还有依赖的其他库，Linker 该出场了。整个链接过程正是基于每个目标文件中的符号才能正确完成，链接过程中很关键的一部分就是符号的管理。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/BN3Tr47.png&#34; alt=&#34;Linker&#34; /&gt;&lt;/p&gt;

&lt;p&gt;我们新建两个文件，分别是 main.m，Foo.m 以及其对应的头文件 Foo.h。分别经历预处理，编译生成对应目标文件，给 clang 传递 -c 是用来完成以上所有工作集合，直接生成目标文件的。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-Shell&#34; data-lang=&#34;Shell&#34;&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-Shell&#34; data-lang=&#34;Shell&#34;&gt;xcrun clang -c main.m
xcrun clang -c Foo.m&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;生成产物为两个对应的目标文件，main.o 以及 Foo.o ，使用链接器进行链接，传统的链接器，无论是 Mac 还是 Linux 上都会有 ld 这个工具，在 /usr/bin/ 下，我们先使用 ld 将对应两个目标文件链接起来，如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C&#34; data-lang=&#34;C&#34;&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C&#34; data-lang=&#34;C&#34;&gt;&lt;span class=&#34;n&#34;&gt;ld&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Foo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;o&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;o&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;但是报错，如下所示:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-Shell&#34; data-lang=&#34;Shell&#34;&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-Shell&#34; data-lang=&#34;Shell&#34;&gt;ld: warning: No version-min specified on &lt;span class=&#34;nb&#34;&gt;command&lt;/span&gt; line
Undefined symbols &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; architecture x86_64:
  &lt;span class=&#34;s2&#34;&gt;&amp;#34;_OBJC_CLASS_&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$_NSObject&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;, referenced from:
      _OBJC_CLASS_&lt;span class=&#34;nv&#34;&gt;$_Foo&lt;/span&gt; in Foo.o
  &lt;span class=&#34;s2&#34;&gt;&amp;#34;_OBJC_METACLASS_&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$_NSObject&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;, referenced from:
      _OBJC_METACLASS_&lt;span class=&#34;nv&#34;&gt;$_Foo&lt;/span&gt; in Foo.o
  &lt;span class=&#34;s2&#34;&gt;&amp;#34;__objc_empty_cache&amp;#34;&lt;/span&gt;, referenced from:
      _OBJC_METACLASS_&lt;span class=&#34;nv&#34;&gt;$_Foo&lt;/span&gt; in Foo.o
      _OBJC_CLASS_&lt;span class=&#34;nv&#34;&gt;$_Foo&lt;/span&gt; in Foo.o
  &lt;span class=&#34;s2&#34;&gt;&amp;#34;_objc_msgSend&amp;#34;&lt;/span&gt;, referenced from:
      _main in main.o
  &lt;span class=&#34;s2&#34;&gt;&amp;#34;_printf&amp;#34;&lt;/span&gt;, referenced from:
      -&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;Foo hello&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; in Foo.o
ld: symbol&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;s&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; not found &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; inferred architecture x86_64&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;其中，报了一堆 OBJC 库找不到的问题，因为是静态链接，我们内部使用了 Foundation 的一些内容，这里也在侧面证明了，想要完成静态链接，所有未定义的符号都需要在静态链接阶段进行修正，因此我们还需要将这些库也链进来，当然，还有 &lt;code&gt;_printf&lt;/code&gt; 也找不到，我们还需要把 C++ 相关的库也同时一并链接，最后的链接命令如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-Shell&#34; data-lang=&#34;Shell&#34;&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-Shell&#34; data-lang=&#34;Shell&#34;&gt;ld main.o Foo.o &lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;xcrun --show-sdk-path&lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;/System/Library/Frameworks/Foundation.framework/Foundation &lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;xcrun --show-sdk-path&lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;/usr/lib/libSystem.B.tbd&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;这样就能够顺利的生成我们所需要的目标文件了。当然，如果你要是使用 clang 提供的默认命令来做，如下，&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-Shell&#34; data-lang=&#34;Shell&#34;&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-Shell&#34; data-lang=&#34;Shell&#34;&gt;xcrun clang main.o Foo.o -Wl,&lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;xcrun --show-sdk-path&lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;/System/Library/Frameworks/Foundation.framework/Foundation&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;会看到你不需要把一些基础的 C 库引入，是因为 clang 本身工具帮你做了一堆环境路径查找的事情，感兴趣可以加上 -v 指令来看完整的输出，a.out 是链接器默认生成的文件名称。&lt;/p&gt;

&lt;h3 id=&#34;nm&#34;&gt;nm&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;nm - display name list (symbol table)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;接下来，引入一个新的命令 nm，其是用来展示目标文件中的符号表信息的。我们使用 nm 命令来查看该可执行文件的符号表信息。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-Shell&#34; data-lang=&#34;Shell&#34;&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-Shell&#34; data-lang=&#34;Shell&#34;&gt;xcrun nm -nm Foo.o


&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;undefined&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; external _OBJC_CLASS_&lt;span class=&#34;nv&#34;&gt;$_NSObject&lt;/span&gt;
                 &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;undefined&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; external _OBJC_METACLASS_&lt;span class=&#34;nv&#34;&gt;$_NSObject&lt;/span&gt;
                 &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;undefined&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; external __objc_empty_cache
                 &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;undefined&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; external _printf
&lt;span class=&#34;m&#34;&gt;0000000000000000&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;__TEXT,__text&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; non-external -&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;Foo hello&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;m&#34;&gt;0000000000000040&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;__DATA,__objc_const&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; non-external l_OBJC_METACLASS_RO_&lt;span class=&#34;nv&#34;&gt;$_Foo&lt;/span&gt;
&lt;span class=&#34;m&#34;&gt;0000000000000088&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;__DATA,__objc_const&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; non-external l_OBJC_&lt;span class=&#34;nv&#34;&gt;$_INSTANCE_METHODS_Foo&lt;/span&gt;
00000000000000a8 &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;__DATA,__objc_const&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; non-external l_OBJC_CLASS_RO_&lt;span class=&#34;nv&#34;&gt;$_Foo&lt;/span&gt;
00000000000000f0 &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;__DATA,__objc_data&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; external _OBJC_METACLASS_&lt;span class=&#34;nv&#34;&gt;$_Foo&lt;/span&gt;
&lt;span class=&#34;m&#34;&gt;0000000000000118&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;__DATA,__objc_data&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; external _OBJC_CLASS_&lt;span class=&#34;nv&#34;&gt;$_Foo&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;同时，我们再查看下 main.o 这个目标文件。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-Shell&#34; data-lang=&#34;Shell&#34;&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-Shell&#34; data-lang=&#34;Shell&#34;&gt;xcrun nm -nm main.o

&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;undefined&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; external _OBJC_CLASS_&lt;span class=&#34;nv&#34;&gt;$_Foo&lt;/span&gt;
                 &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;undefined&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; external _objc_msgSend
&lt;span class=&#34;m&#34;&gt;0000000000000000&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;__TEXT,__text&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; external _main&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;再查看下最终的目标输出文件的符号信息，如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-Shell&#34; data-lang=&#34;Shell&#34;&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-Shell&#34; data-lang=&#34;Shell&#34;&gt;xcun nm -nm a.out

&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;undefined&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; external _OBJC_CLASS_&lt;span class=&#34;nv&#34;&gt;$_NSObject&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;from libobjc&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
                 &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;undefined&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; external _OBJC_METACLASS_&lt;span class=&#34;nv&#34;&gt;$_NSObject&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;from libobjc&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
                 &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;undefined&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; external __objc_empty_cache &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;from libobjc&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
                 &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;undefined&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; external _objc_msgSend &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;from libobjc&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
                 &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;undefined&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; external _printf &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;from libSystem&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
                 &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;undefined&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; external dyld_stub_binder &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;from libSystem&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;m&#34;&gt;0000000000001000&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;__TEXT,__text&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;referenced dynamically&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; external __mh_execute_header
0000000000001ef0 &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;__TEXT,__text&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; external _main
0000000000001f50 &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;__TEXT,__text&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; non-external -&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;Foo hello&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;m&#34;&gt;0000000000002100&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;__DATA,__objc_data&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; external _OBJC_METACLASS_&lt;span class=&#34;nv&#34;&gt;$_Foo&lt;/span&gt;
&lt;span class=&#34;m&#34;&gt;0000000000002128&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;__DATA,__objc_data&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; external _OBJC_CLASS_&lt;span class=&#34;nv&#34;&gt;$_Foo&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;大家会看到每一个目标文件符号表信息中会存储着 undefined 字样的符号，名字均为我们没有在代码中所体现出来的函数名字或者字符变量（本例没有引入变量）名称，在生成对应的可执行文件的过程中，链接器会查找所有输入的目标文件中每一个的符号表，然后组成全局符号表，相互找所需要的符号，并且对非动态库文件的符号进行定位。&lt;/p&gt;

&lt;p&gt;在进行链接之后，所有原来标记为 undefined 的符号依然是 undefined，但是会发现在对应符号后方会标记出该符号来自于哪里。这个也就是当我们可执行文件需要使用该符号的时候，对应去哪里加载对应的 dylib。&lt;/p&gt;

&lt;h3 id=&#34;otool&#34;&gt;otool&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;llvm-otool - the otool-compatible command line parser for llvm-objdump.
The  command  line  shim  llvm-otool  takes all the same options as the original otool(1) command and executes an  equivalent  objdump(1) command.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;接下来再介绍一个命令行工具 otool(object file displaying tool)，其底层是对 objdump 的封装，而 objdump 是 Linux 下查看二进制文件的工具。&lt;/p&gt;

&lt;p&gt;我们就用 otool 来查看目标文件所需要使用的库的地址在哪里。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-Shell&#34; data-lang=&#34;Shell&#34;&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-Shell&#34; data-lang=&#34;Shell&#34;&gt;// -L print shared libraries used
xcrun otool -L a.out


a.out:
        /System/Library/Frameworks/Foundation.framework/Versions/C/Foundation &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;compatibility version &lt;span class=&#34;m&#34;&gt;300&lt;/span&gt;.0.0, current version &lt;span class=&#34;m&#34;&gt;1560&lt;/span&gt;.12.0&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
        /usr/lib/libSystem.B.dylib &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;compatibility version &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;.0.0, current version &lt;span class=&#34;m&#34;&gt;1252&lt;/span&gt;.200.5&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
        /usr/lib/libobjc.A.dylib &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;compatibility version &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;.0.0, current version &lt;span class=&#34;m&#34;&gt;228&lt;/span&gt;.0.0&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;当然，我们也可以查看一下其中的 libSystem.B.dylib 的情况，其实 macOS 上的 C 基础库。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-Shell&#34; data-lang=&#34;Shell&#34;&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;28
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;29
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;30
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;31
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;32
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;33
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;34
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;35
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;36
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;37
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-Shell&#34; data-lang=&#34;Shell&#34;&gt;xcrun otool -L /usr/lib/libSystem.B.dylib
    
    /usr/lib/libSystem.B.dylib:
            /usr/lib/libSystem.B.dylib &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;compatibility version &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;.0.0, current version &lt;span class=&#34;m&#34;&gt;1252&lt;/span&gt;.250.1&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
            /usr/lib/system/libcache.dylib &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;compatibility version &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;.0.0, current version &lt;span class=&#34;m&#34;&gt;81&lt;/span&gt;.0.0&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
            /usr/lib/system/libcommonCrypto.dylib &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;compatibility version &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;.0.0, current version &lt;span class=&#34;m&#34;&gt;60118&lt;/span&gt;.250.2&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
            /usr/lib/system/libcompiler_rt.dylib &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;compatibility version &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;.0.0, current version &lt;span class=&#34;m&#34;&gt;63&lt;/span&gt;.4.0&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
            /usr/lib/system/libcopyfile.dylib &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;compatibility version &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;.0.0, current version &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;.0.0&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
            /usr/lib/system/libcorecrypto.dylib &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;compatibility version &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;.0.0, current version &lt;span class=&#34;m&#34;&gt;602&lt;/span&gt;.250.23&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
            /usr/lib/system/libdispatch.dylib &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;compatibility version &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;.0.0, current version &lt;span class=&#34;m&#34;&gt;1008&lt;/span&gt;.250.7&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
            /usr/lib/system/libdyld.dylib &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;compatibility version &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;.0.0, current version &lt;span class=&#34;m&#34;&gt;655&lt;/span&gt;.1.1&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
            /usr/lib/system/libkeymgr.dylib &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;compatibility version &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;.0.0, current version &lt;span class=&#34;m&#34;&gt;30&lt;/span&gt;.0.0&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
            /usr/lib/system/liblaunch.dylib &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;compatibility version &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;.0.0, current version &lt;span class=&#34;m&#34;&gt;1336&lt;/span&gt;.251.2&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
            /usr/lib/system/libmacho.dylib &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;compatibility version &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;.0.0, current version &lt;span class=&#34;m&#34;&gt;927&lt;/span&gt;.0.2&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
            /usr/lib/system/libquarantine.dylib &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;compatibility version &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;.0.0, current version &lt;span class=&#34;m&#34;&gt;86&lt;/span&gt;.220.1&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
            /usr/lib/system/libremovefile.dylib &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;compatibility version &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;.0.0, current version &lt;span class=&#34;m&#34;&gt;45&lt;/span&gt;.200.2&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
            /usr/lib/system/libsystem_asl.dylib &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;compatibility version &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;.0.0, current version &lt;span class=&#34;m&#34;&gt;356&lt;/span&gt;.200.4&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
            /usr/lib/system/libsystem_blocks.dylib &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;compatibility version &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;.0.0, current version &lt;span class=&#34;m&#34;&gt;73&lt;/span&gt;.0.0&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
            /usr/lib/system/libsystem_c.dylib &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;compatibility version &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;.0.0, current version &lt;span class=&#34;m&#34;&gt;1272&lt;/span&gt;.250.1&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
            /usr/lib/system/libsystem_configuration.dylib &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;compatibility version &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;.0.0, current version &lt;span class=&#34;m&#34;&gt;963&lt;/span&gt;.250.1&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
            /usr/lib/system/libsystem_coreservices.dylib &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;compatibility version &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;.0.0, current version &lt;span class=&#34;m&#34;&gt;66&lt;/span&gt;.0.0&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
            /usr/lib/system/libsystem_darwin.dylib &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;compatibility version &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;.0.0, current version &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;.0.0&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
            /usr/lib/system/libsystem_dnssd.dylib &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;compatibility version &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;.0.0, current version &lt;span class=&#34;m&#34;&gt;878&lt;/span&gt;.250.4&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
            /usr/lib/system/libsystem_info.dylib &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;compatibility version &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;.0.0, current version &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;.0.0&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
            /usr/lib/system/libsystem_m.dylib &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;compatibility version &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;.0.0, current version &lt;span class=&#34;m&#34;&gt;3158&lt;/span&gt;.200.7&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
            /usr/lib/system/libsystem_malloc.dylib &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;compatibility version &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;.0.0, current version &lt;span class=&#34;m&#34;&gt;166&lt;/span&gt;.251.2&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
            /usr/lib/system/libsystem_networkextension.dylib &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;compatibility version &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;.0.0, current version &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;.0.0&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
            /usr/lib/system/libsystem_notify.dylib &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;compatibility version &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;.0.0, current version &lt;span class=&#34;m&#34;&gt;172&lt;/span&gt;.200.21&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
            /usr/lib/system/libsystem_sandbox.dylib &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;compatibility version &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;.0.0, current version &lt;span class=&#34;m&#34;&gt;851&lt;/span&gt;.250.12&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
            /usr/lib/system/libsystem_secinit.dylib &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;compatibility version &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;.0.0, current version &lt;span class=&#34;m&#34;&gt;30&lt;/span&gt;.220.1&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
            /usr/lib/system/libsystem_kernel.dylib &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;compatibility version &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;.0.0, current version &lt;span class=&#34;m&#34;&gt;4903&lt;/span&gt;.251.3&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
            /usr/lib/system/libsystem_platform.dylib &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;compatibility version &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;.0.0, current version &lt;span class=&#34;m&#34;&gt;177&lt;/span&gt;.250.1&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
            /usr/lib/system/libsystem_pthread.dylib &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;compatibility version &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;.0.0, current version &lt;span class=&#34;m&#34;&gt;330&lt;/span&gt;.250.2&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
            /usr/lib/system/libsystem_symptoms.dylib &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;compatibility version &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;.0.0, current version &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;.0.0&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
            /usr/lib/system/libsystem_trace.dylib &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;compatibility version &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;.0.0, current version &lt;span class=&#34;m&#34;&gt;906&lt;/span&gt;.250.5&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
            /usr/lib/system/libunwind.dylib &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;compatibility version &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;.0.0, current version &lt;span class=&#34;m&#34;&gt;35&lt;/span&gt;.4.0&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
            /usr/lib/system/libxpc.dylib &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;compatibility version &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;.0.0, current version &lt;span class=&#34;m&#34;&gt;1336&lt;/span&gt;.251.2&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;甚至查看 a.out 可执行文件在执行时所需要依赖的所有依赖。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-Shell&#34; data-lang=&#34;Shell&#34;&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-Shell&#34; data-lang=&#34;Shell&#34;&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;DYLD_PRINT_LIBRARIES&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; ./a.out &lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;可以通过结果看到，一个简单的程序所需要链接的 &lt;code&gt;dylib&lt;/code&gt; 有多少，就是因为有这么多动态库要加载，在可执行程序加载到内存中执行的时候，不断的需要装载动态库进入内存，所需要花费的时间其实很可观，所以系统层面提供了共享缓存，也即会提前加载到内存中的动态链接库集合，当需要链接到对应动态库的时候就省略了从磁盘写入内存的过程。&lt;/p&gt;

&lt;h2 id=&#34;总结一句话&#34;&gt;总结一句话&lt;/h2&gt;

&lt;p&gt;整个编译过程可以归结为：
头文件约定，编译器信任彼此，链接器验证&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>写个小工具 Swwwitch</title>
      <link>https://hechen.xyz/post/swwwitch/</link>
      <pubDate>Sat, 30 Mar 2019 11:29:54 +0800</pubDate>
      
      <guid>https://hechen.xyz/post/swwwitch/</guid>
      
        <description>

&lt;p&gt;最近看到开发圈某热点，做了个小工具，总结下最近的几个 CocoaApp 上的功能，仅做练手。现在只包含了两个开关：切换系统主题和隐藏桌面 icon 的功能。&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/U9RTmVU.png&#34; alt=&#34;Swwwitch-c500&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;功能点&#34;&gt;功能点&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;切换系统主题&lt;/li&gt;
&lt;li&gt;显式或者印象桌面图标&lt;/li&gt;
&lt;li&gt;完全的 Menu Only 应用&lt;/li&gt;
&lt;li&gt;开机自启动&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;关于第三点的实现在&lt;a href=&#34;https://hechen.xyz/post/dockless-cocoaapps/&#34;&gt;另外一篇文章&lt;/a&gt;有讲过，第四点的实现在 &lt;a href=&#34;https://hechen.xyz/post/autostartwhenlogin/&#34;&gt;这一篇&lt;/a&gt; 中有讲。&lt;/p&gt;

&lt;h3 id=&#34;系统主题切换&#34;&gt;系统主题切换&lt;/h3&gt;

&lt;p&gt;关于系统主题切换主要是基于 AppleScript 所写，&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-AppleScript&#34; data-lang=&#34;AppleScript&#34;&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-AppleScript&#34; data-lang=&#34;AppleScript&#34;&gt;&lt;span class=&#34;k&#34;&gt;tell&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;application&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;System Events&amp;#34;&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;tell&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;appearance&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;preferences&lt;/span&gt;
		&lt;span class=&#34;k&#34;&gt;set&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;dark&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;mode&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;to&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;not&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;dark&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;mode&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;end&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;tell&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;end&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;tell&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;你完全可以自行执行这段 Apple Script 来切换主题，你可以点击下面链接尝试。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;applescript://com.apple.scripteditor?action=new&amp;amp;name=Change%20Theme&amp;amp;script=tell%20application%20%22System%20Events%22%0D%09tell%20appearance%20preferences%0D%09%09set%20dark%20mode%20to%20not%20dark%20mode%0D%09end%20tell%0Dend%20tell&#34;&gt;Click Here to run&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;显式-隐藏桌面图标&#34;&gt;显式/隐藏桌面图标&lt;/h3&gt;

&lt;p&gt;关于隐藏桌面图标，实际上是执行系统的 Command 来实现的，Cocoa 应用可以显式使用 Process（也就是 NSTask）来执行任务，我们也是通过 NSTask 执行了一段如下的命令行达到的目的：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-Shell&#34; data-lang=&#34;Shell&#34;&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-Shell&#34; data-lang=&#34;Shell&#34;&gt;defaults write com.apple.finder CreateDesktop &lt;span class=&#34;nb&#34;&gt;false&lt;/span&gt;
killall Finder&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;你可以自行点击以下链接尝试。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;applescript://com.apple.scripteditor?action=new&amp;amp;name=Hide%20Desktop%20Icons&amp;amp;script=tell%20application%20%22Terminal%22%0D%20%20%20%20do%20script%20%22defaults%20write%20com.apple.finder%20CreateDesktop%20false%3b%20killall%20Finder%22%0Dend%20tell&#34;&gt;Click here to hide Desktop Icons&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;applescript://com.apple.scripteditor?action=new&amp;amp;name=Hide%20Desktop%20Icons&amp;amp;script=tell%20application%20%22Terminal%22%0D%20%20%20%20do%20script%20%22defaults%20write%20com.apple.finder%20CreateDesktop%20true%3b%20killall%20Finder%22%0Dend%20tell&#34;&gt;Click here to show Desktop Icons&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;感兴趣可以去看下代码，领会意思即可。
&lt;a href=&#34;https://github.com/hechen/Swwwitch/releases&#34;&gt;Releases&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;todo&#34;&gt;TODO&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Add more switch&lt;/li&gt;
&lt;li&gt;Add User-Customized switch setting&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;links&#34;&gt;Links&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://ss64.com/osx/&#34;&gt;Checkout all command lines macOS Support&lt;/a&gt;&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>关于 Mac 应用的自启动是如何做到的</title>
      <link>https://hechen.xyz/post/autostartwhenlogin/</link>
      <pubDate>Mon, 18 Mar 2019 17:29:54 +0800</pubDate>
      
      <guid>https://hechen.xyz/post/autostartwhenlogin/</guid>
      
        <description>

&lt;p&gt;开机自启动是 Cocoa 应用最常见的一种功能，尤其是针对需要常驻 Menu 的服务来说更是如此，今天我们对开机启动项的功能加入做个梳理。&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;在 &lt;a href=&#34;https://developer.apple.com/library/archive/documentation/MacOSX/Conceptual/BPSystemStartup/Chapters/CreatingLoginItems.html#//apple_ref/doc/uid/10000172i-SW5-SW1&#34;&gt;Daemons and Services Programming Guide&lt;/a&gt; 中我们能找到关于自启动项的开发说明：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Applications can contain a helper application as a full application bundle, stored inside the main application bundle in the Contents/Library/LoginItems directory. Set either the LSUIElement or LSBackgroundOnly key in the Info.plist file of the helper application’s bundle.&lt;/p&gt;

&lt;p&gt;Use the SMLoginItemSetEnabled function (available in OS X v10.6.6 and later) to enable a helper application. It takes two arguments, a CFStringRef containing the bundle identifier of the helper application, and a Boolean specifying the desired state. Pass true to start the helper application immediately and indicate that it should be started every time the user logs in. Pass false to terminate the helper application and indicate that it should no longer be launched when the user logs in. This function returns true if the requested change has taken effect; otherwise, it returns false. This function can be used to manage any number of helper applications.&lt;/p&gt;

&lt;p&gt;If multiple applications (for example, several applications from the same company) contain a helper application with the same bundle identifier, only the one with the greatest bundle version number is launched. Any of the applications that contain a copy of the helper application can enable and disable it.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;如文档中描述的那样，你可以在主应用中包含一个辅助应用，并且路径固定为 &lt;code&gt;Contents/Library/LoginItems&lt;/code&gt;，&lt;/p&gt;

&lt;p&gt;另外一种方式就是使用 &lt;code&gt;Shared File List&lt;/code&gt;，其相关 API 在 &lt;a href=&#34;https://developer.apple.com/documentation/coreservices/launch_services&#34;&gt;Launch Services Reference&lt;/a&gt; 能找到，其实具体的 API 就在 &lt;code&gt;LSSharedFileList.h&lt;/code&gt; 中。&lt;/p&gt;

&lt;h2 id=&#34;沙盒应用&#34;&gt;沙盒应用&lt;/h2&gt;

&lt;p&gt;在官方文档 &lt;a href=&#34;http://developer.apple.com/library/mac/documentation/Security/Conceptual/AppSandboxDesignGuide/DesigningYourSandbox/DesigningYourSandbox.html#//apple_ref/doc/uid/TP40011183-CH4-SW3&#34;&gt;App Sandbox Design Guide&lt;/a&gt; 中有如下针对开机自启动的描述：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;To create a login item for your sandboxed app, use the SMLoginItemSetEnabled function (declared in ServiceManagement/SMLoginItem.h) as described in Adding Login Items Using the Service Management Framework.&lt;/p&gt;

&lt;p&gt;(With App Sandbox, you cannot create a login item using functions in the LSSharedFileList.h header file. For example, you cannot use the function LSSharedFileListInsertItemURL. Nor can you manipulate the state of Launch Services, such as by using the function LSRegisterURL.)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;其实上面提及的方式也就是在第一小节中提到的两种方式中的第一种，而且第二种共享文件列表的 API 是无法针对沙盒应用使用的，而且 &lt;code&gt;LSSharedFileList.h&lt;/code&gt; 已经在 10.10 系统版本之后标记为废弃了。&lt;/p&gt;

&lt;p&gt;综合上面的说明，目前在 macOS 上加入自启动项的方式也有且仅有一种方式，也就是加入辅助应用来引导主应用启动。整个思路应该是如下：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;将辅助应用加入系统启动项中；&lt;/li&gt;
&lt;li&gt;系统启动，进而自启动辅助应用；&lt;/li&gt;
&lt;li&gt;辅助应用引导主应用启动；&lt;/li&gt;
&lt;li&gt;主应用启动完成，干掉辅助应用&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;是的，就是这么绕，具体要怎么做呢？ 主要分为如下几个步骤：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;创建辅助应用，其作为主应用的 Target 新建出来&lt;/li&gt;
&lt;li&gt;将辅助应用的 Info.plist 文件中指定属性 &lt;code&gt;LSBackgroundOnly&lt;/code&gt; 为 &lt;code&gt;YES&lt;/code&gt;；&lt;/li&gt;
&lt;li&gt;在辅助应用 Target 的 build setting 中设置 &lt;code&gt;Skip Install&lt;/code&gt; 为 &lt;code&gt;YES&lt;/code&gt;（关于其作用主要是不需要 Xcode archive 执行将 Product 拷贝到最终的包里，因为我们执行加入了步骤 4）;&lt;/li&gt;
&lt;li&gt;在主应用的 build phase 中加入 &lt;code&gt;Copy Files&lt;/code&gt; 阶段，

&lt;ul&gt;
&lt;li&gt;指定 destination 为 Wrapper&lt;/li&gt;
&lt;li&gt;指定 subpath 为 &lt;code&gt;Contents/Library/LoginItems&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;加入辅助应用的 Product&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;大家第一眼看到这些步骤的时候是不是头都大了，没错，这仅仅是写代码之前的参数配置工作。&lt;/p&gt;

&lt;h2 id=&#34;启动项支持&#34;&gt;启动项支持&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/fJUpG26.png&#34; alt=&#34;Add New Target&#34; /&gt;&lt;/p&gt;

&lt;p&gt;指定 CocoaApp&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/tXJDr1Y.png&#34; alt=&#34;Specify Cocoa App&#34; /&gt;&lt;/p&gt;

&lt;p&gt;指定 Product ID 为 &lt;code&gt;StartAtLoginLauncher&lt;/code&gt;,该 Target 的 BundleID 为 &lt;code&gt;app.chen.osx.demo.StartAtLoginLauncher&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/uj2yhht.png&#34; alt=&#34;Modify BundleID&#34; /&gt;&lt;/p&gt;

&lt;p&gt;然后，修改 StartAtLoginLauncher 的 Info.plist 文件，指定 &lt;code&gt;LSBackgroundOnly&lt;/code&gt; 为 YES
&lt;img src=&#34;https://i.imgur.com/BqNsFm7.png&#34; alt=&#34;BackgroundOnly&#34; /&gt;&lt;/p&gt;

&lt;p&gt;修改 StartAtLoginLauncher Target 的 Build Setting 中 &lt;code&gt;Skip Install&lt;/code&gt; 为 &lt;code&gt;YES&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/qKZzECK.png&#34; alt=&#34;Skill Install&#34; /&gt;&lt;/p&gt;

&lt;p&gt;紧接着是设置主应用 StartAtLogin Target，为其加入 Copy Files Build Phase，如下设置，路径是固定的 &lt;code&gt;Contents/Library/LoginItems&lt;/code&gt;，Copy 对象为 &lt;code&gt;StartAtLoginLauncher&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/wfaxgmZ.png&#34; alt=&#34;Copy files Build Phase&#34; /&gt;&lt;/p&gt;

&lt;p&gt;至此，所有设置均已完成，你可以 Command+B 产出一个 Product 看看，在主应用里是否已经将启动项目包含进去了。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/XfyYMG1.png&#34; alt=&#34;Build Product&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/OGXYmxw.png&#34; alt=&#34;Reveal Package Content&#34; /&gt;&lt;/p&gt;

&lt;p&gt;还没有结束，因为 StartAtLoginLauncher 应用是指在后台运行，我们不希望辅助应用启动的时候弹出 UI，因此还需要删除相关的 UI 代码，在 Main.storyboard 中，删除 Window 以及 ViewController，只保留 Application Scene 即可&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/poclDG1.png&#34; alt=&#34;Demo Start When Login&#34; /&gt;&lt;/p&gt;

&lt;p&gt;至此，所有写代码之前的工作已经完成，我们已经为主应用生成了对应的辅助应用，帮助其启动。&lt;/p&gt;

&lt;h3 id=&#34;加入启动项&#34;&gt;加入启动项&lt;/h3&gt;

&lt;p&gt;代码核心逻辑包含两部分：
1. 主应用启动之后杀掉辅助应用，因为其已经完成了使命；
2. 助应用启动之后将主应用唤醒&lt;/p&gt;

&lt;h4 id=&#34;主应用&#34;&gt;主应用&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-Swift&#34; data-lang=&#34;Swift&#34;&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-Swift&#34; data-lang=&#34;Swift&#34;&gt;&lt;span class=&#34;kd&#34;&gt;extension&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Notification&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Name&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;killLauncher&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Notification&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;killLauncher&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;applicationDidFinishLaunching&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;aNotification&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Notification&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;// Insert code here to initialize your application&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;launcherAppId&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;app.chen.osx.demo.StartAtLoginLauncher&amp;#34;&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;runningApps&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;NSWorkspace&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;shared&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;runningApplications&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;isRunning&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;runningApps&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;filter&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bundleIdentifier&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;launcherAppId&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}.&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;isEmpty&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;isRunning&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;DistributedNotificationCenter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;default&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;().&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;post&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;killLauncher&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
                                                         &lt;span class=&#34;n&#34;&gt;object&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Bundle&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bundleIdentifier&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;!)&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;主应用在完成启动之后，检查当前正在执行的 Application 列表中是否包含了我们的辅助应用，如果包含，发送通知，让其 Terminate&lt;/p&gt;

&lt;h4 id=&#34;辅助应用&#34;&gt;辅助应用&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-Swift&#34; data-lang=&#34;Swift&#34;&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-Swift&#34; data-lang=&#34;Swift&#34;&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;applicationDidFinishLaunching&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;aNotification&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Notification&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;mainAppIdentifier&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;app.chen.osx.demo.StartAtLogin&amp;#34;&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;runningApps&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;NSWorkspace&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;shared&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;runningApplications&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;isRunning&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;runningApps&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;filter&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bundleIdentifier&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;mainAppIdentifier&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}.&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;isEmpty&lt;/span&gt;
        
    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;isRunning&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;DistributedNotificationCenter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;default&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;().&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;addObserver&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
                                                                &lt;span class=&#34;n&#34;&gt;selector&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;#selector&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;terminate&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
                                                                &lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;killLauncher&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
                                                                &lt;span class=&#34;n&#34;&gt;object&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;mainAppIdentifier&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
            
        &lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;path&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Bundle&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bundlePath&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;NSString&lt;/span&gt;
        &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;components&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;path&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pathComponents&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;components&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;removeLast&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;components&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;removeLast&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;components&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;removeLast&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;components&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;append&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;MacOS&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;components&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;append&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;StartAtLogin&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;//main app name&lt;/span&gt;
            
        &lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;newPath&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;NSString&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;path&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;withComponents&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;components&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;            
            &lt;span class=&#34;n&#34;&gt;NSWorkspace&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;shared&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;launchApplication&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;newPath&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; 
        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
            &lt;span class=&#34;kc&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;terminate&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;辅助应用启动之后，查询主应用是否已经运行，如果已经运行，就自觉干掉自己。如果没有运行，我们唤醒主 App，在此之前设置监听，等到主应用启动之后会发给自己通知，然后再自杀 😂&lt;/p&gt;

&lt;p&gt;这其中我们使用了 DistributedNotificationCenter，和平时我们使用的 NotificationCenter 不同，其发出的通知是跨任务（进程间）的，也就是其他进程如果注册了同样的通知，也是能够收到监听通知的。 系统的日夜间通知就是这种类型，其会在所有 Task 之间进行广播，该通知的 NotificationName 是 &lt;code&gt;AppleInterfaceThemeChangedNotification&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-Swift&#34; data-lang=&#34;Swift&#34;&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-Swift&#34; data-lang=&#34;Swift&#34;&gt;&lt;span class=&#34;kd&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;notificationName&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;NSNotification&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;AppleInterfaceThemeChangedNotification&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;reigsterThemeChangedNotification&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;DistributedNotificationCenter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;default&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;().&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;addObserver&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;selector&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;#selector&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;selectorHandler&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;notificationName&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;object&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;nil&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;kr&#34;&gt;@objc&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;selectorHandler&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;bp&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Theme Changed!&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;		
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;因此 Demo 中的通知名字只是示例，在实际开发中，尽可能的确保通知的唯一性。&lt;/p&gt;

&lt;h4 id=&#34;切换自启动状态&#34;&gt;切换自启动状态&lt;/h4&gt;

&lt;p&gt;关于自启动状态的设置包含两个主要的 API：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;SMCopyAllJobDictionaries&lt;/li&gt;
&lt;li&gt;SMLoginItemSetEnabled&lt;/li&gt;
&lt;/ol&gt;

&lt;h5 id=&#34;smcopyalljobdictionaries&#34;&gt;SMCopyAllJobDictionaries&lt;/h5&gt;

&lt;p&gt;获取当前我们的启动项设置情况是通过 &lt;code&gt;SMCopyAllJobDictionaries&lt;/code&gt; 方法，如下定义。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C&#34; data-lang=&#34;C&#34;&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;28
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C&#34; data-lang=&#34;C&#34;&gt;&lt;span class=&#34;cm&#34;&gt;/*!
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt; * @function SMCopyAllJobDictionaries
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt; * @abstract
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt; * Copy the job description dictionaries for all jobs in the given domain.
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt; *
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt; * @param domain
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt; * The job&amp;#39;s domain (e.g. {@link kSMDomainSystemLaunchd} or
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt; * {@link kSMDomainUserLaunchd}).
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt; *
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt; * @result
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt; * A new array containing all job dictionaries, or NULL if an error occurred. 
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt; * Must be released by the caller.
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt; *
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt; * @discussion
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt; * SMCopyAllJobDictionaries returns an array of the job description dictionaries
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt; * for all jobs in the given domain, or NULL if an error occurred. This routine
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt; * is deprecated and will be removed in a future release. There will be no
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt; * provided replacement.
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt; *
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt; * For the specific use of testing the state of a login item that may have been
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt; * enabled with SMLoginItemSetEnabled() in order to show that state to the
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt; * user, this function remains the recommended API. A replacement API for this
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt; * specific use will be provided before this function is removed.
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt; */&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;__OSX_AVAILABLE_BUT_DEPRECATED&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;__MAC_10_6&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;__MAC_10_10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;__IPHONE_3_0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;__IPHONE_8_0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;XPC_EXPORT&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;CFArrayRef&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;SMCopyAllJobDictionaries&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;CFStringRef&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;domain&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;该方法虽然标记 10.10 系统开始废弃，但是到目前的 10.14 版本还未提供替换的 API，所以还是可以继续使用的（文档所说）。&lt;/p&gt;

&lt;p&gt;传入的参数可以理解就是指定获取任务类型的，我们使用 kSMDomainUserLaunchd 来获取所有加入到用户启动项列表中的任务，其中每一个 Job 都是一个字典结构，内容大概类似：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/KDLqn9a.png&#34; alt=&#34;Launch Job-c500&#34; /&gt;&lt;/p&gt;

&lt;p&gt;我们可以通过 Label 来查找我们需要的 Job，&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-Swift&#34; data-lang=&#34;Swift&#34;&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-Swift&#34; data-lang=&#34;Swift&#34;&gt;&lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;launchHelperIdentifier&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;app.chen.osx.demo.StartAtLoginLauncher&amp;#34;&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;jobs&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;SMCopyAllJobDictionaries&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;kSMDomainUserLaunchd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;takeRetainedValue&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;as&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;?&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[[&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;AnyObject&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]]&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;autoLaunchRegistered&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;jobs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;?.&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;contains&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;where&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Label&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;as&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;!&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;launchHelperIdentifier&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;})&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;??&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;false&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h5 id=&#34;smloginitemsetenabled&#34;&gt;SMLoginItemSetEnabled&lt;/h5&gt;

&lt;p&gt;设置启动项是通过 &lt;code&gt;SMLoginItemSetEnabled&lt;/code&gt; 方法，参数为要自启动的应用的 BundleID 以及自启动状态。&lt;/p&gt;

&lt;p&gt;要记住，这里我们进行更改的是针对 Launch Helper 的设置。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-Swift&#34; data-lang=&#34;Swift&#34;&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-Swift&#34; data-lang=&#34;Swift&#34;&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;startAtLogin&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// ....&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;launchHelperIdentifier&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;app.chen.osx.demo.StartAtLoginLauncher&amp;#34;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;SMLoginItemSetEnabled&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;launchHelperIdentifier&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;CFString&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;startAtLogin&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h3 id=&#34;测试&#34;&gt;测试&lt;/h3&gt;

&lt;p&gt;至此，关于自启动项的工作已经完成，想要测试，可以先 Archive 出一个安装包，然后将 Demo App 拖到 /Applications 目录，启动之后，设置 Start At Login 选项 checked 状态。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/szvqHoG.png&#34; alt=&#34;StartAtLogin&#34; /&gt;&lt;/p&gt;

&lt;p&gt;如果不放心，退出登录之前，Quit 掉测试应用，并且取消 Reopen 选项。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/5KrpAuU.png&#34; alt=&#34;Not Reopen&#34; /&gt;&lt;/p&gt;

&lt;p&gt;然后，Log Out 当前用户，之后再次登录进来，看 Demo 应用是否被启动了。在我的电脑上测试再次启动之后 Demo 应用就会被顺利启动了。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/XJsUmVS.png&#34; alt=&#34;Desktop&#34; /&gt;&lt;/p&gt;

&lt;p&gt;其中还有一点是关于 Target 的 Sandbox 属性，作为目前唯一可行的自启动官方方案，其同时适用于沙盒应用和非沙盒应用的。&lt;/p&gt;

&lt;h2 id=&#34;工具推荐&#34;&gt;工具推荐&lt;/h2&gt;

&lt;p&gt;推荐下 Github 上 &lt;a href=&#34;https://github.com/sindresorhus&#34;&gt;sindresorhus&lt;/a&gt;
写的小工具 &lt;a href=&#34;https://github.com/sindresorhus/LaunchAtLogin&#34;&gt;LaunchAtLogin&lt;/a&gt;，简化了上述的步骤。&lt;/p&gt;

&lt;h2 id=&#34;参考链接&#34;&gt;参考链接&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.apple.com/library/archive/documentation/Security/Conceptual/AppSandboxDesignGuide/AboutAppSandbox/AboutAppSandbox.html#//apple_ref/doc/uid/TP40011183-CH1-SW1&#34;&gt;App Sandbox Design Guide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.apple.com/library/archive/documentation/MacOSX/Conceptual/BPSystemStartup/Chapters/Introduction.html#//apple_ref/doc/uid/10000172i-SW1-SW1&#34;&gt;Daemons and Services Programming Guide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.apple.com/library/archive/documentation/Carbon/Conceptual/LaunchServicesConcepts/LSCIntro/LSCIntro.html#//apple_ref/doc/uid/TP30000999&#34;&gt;Launch Services Programming Guide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/Notifications/Articles/NotificationCenters.html&#34;&gt;NSDistributedNotificationCenter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://stackoverflow.com/questions/16374851/xcode-4-target-build-setting-skip-install-what-is-it&#34;&gt;What the Skip-Install mean?&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
      
    </item>
    
    <item>
      <title>Mac 平台上那些 Dockless 的 App 都是如何实现的？</title>
      <link>https://hechen.xyz/post/dockless-cocoaapps/</link>
      <pubDate>Wed, 13 Mar 2019 17:29:54 +0800</pubDate>
      
      <guid>https://hechen.xyz/post/dockless-cocoaapps/</guid>
      
        <description>

&lt;p&gt;Menu Only 算是 Cocoa App 中最常见的一项，它使得 App 不占用你的 Dock 栏，在多 workspace 的时候也不影响正常使用，随时都可以在屏幕的菜单栏中执行快捷操作。尤其是针对一些需要便捷性要求比较高的应用来讲，Menu bar 的功能必不可少。本文就简单介绍一下关于 Menu App 中关键的几个开发步骤。&lt;/p&gt;

&lt;!-- more --&gt;

&lt;h1 id=&#34;介绍&#34;&gt;介绍&lt;/h1&gt;

&lt;p&gt;以 &lt;a href=&#34;https://www.shimovpn.com/&#34;&gt;Shimo&lt;/a&gt; 这个 App 举例，&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/vT7EEVK.png&#34; alt=&#34;Shimo&#34; /&gt;&lt;/p&gt;

&lt;p&gt;在其设置选项卡中能看到 Show Shimo in 的选项菜单，其中有三项：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Menubar only&lt;/li&gt;
&lt;li&gt;Dock only&lt;/li&gt;
&lt;li&gt;Menubar &amp;amp; Dock&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/WywIVkV.png&#34; alt=&#34;Shimo Menu&#34; /&gt;&lt;/p&gt;

&lt;p&gt;这也是常见的 Cocoa 应用的模式支持，很多常见的 App 都支持，比如 DayOne，Dash，Todoist 等。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/ioUvpNw.png&#34; alt=&#34;Dash&#34; /&gt;
&lt;img src=&#34;https://i.imgur.com/ORYAEcZ.png&#34; alt=&#34;Todoist&#34; /&gt;&lt;/p&gt;

&lt;p&gt;其实核心功能有两点：
1. 可以显示或者隐藏 Dock 图标；
2. 可以显示或者隐藏 Menu 菜单这两者的组合。&lt;/p&gt;

&lt;h1 id=&#34;核心步骤&#34;&gt;核心步骤&lt;/h1&gt;

&lt;h2 id=&#34;dock&#34;&gt;Dock&lt;/h2&gt;

&lt;p&gt;普通的 Cocoa Application 创建之后，默认都是 Dock 上展示的，如果想隐藏 Dock 图标，首先它需要有这个能力，这个能力是通过 info.plist 文件中的 Key 来指定的，这个 Key 就是 &lt;code&gt;LSUIElement&lt;/code&gt;，我们将其值设置为 true&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-plist&#34; data-lang=&#34;plist&#34;&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-plist&#34; data-lang=&#34;plist&#34;&gt;	&amp;lt;key&amp;gt;LSUIElement&amp;lt;/key&amp;gt;
	&amp;lt;true/&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;在可视化展示 plist 的时候能看到针对该 Key 的描述是标识 Application is agent(UIElement)&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/ef3w8TR.png&#34; alt=&#34;plist&#34; /&gt;&lt;/p&gt;

&lt;p&gt;之后，再次打开 App，会发现 Dock 上已经看不到该应用的图标了，这就是 UIElement 的作用，其实际上就是声明我们的 Cocoa App 是 UIElement（也即 agent） application，Dock 不显示，允许有一定的用户界面。在方法 &lt;code&gt;TransformProcessType&lt;/code&gt; 的头文件中能看到 Cocoa Application 的几种常见类型：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-Swift&#34; data-lang=&#34;Swift&#34;&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;28
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;29
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;30
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;31
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-Swift&#34; data-lang=&#34;Swift&#34;&gt;&lt;span class=&#34;cm&#34;&gt;/*
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt; *  TransformProcessType()
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt; *  
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt; *  Summary:
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt; *    Changes the &amp;#39;type&amp;#39; of the process specified in the psn parameter.
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt; *     The type is specified in the transformState parameter.
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt; *  
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt; *  Discussion:
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt; *    Given a psn for an application, this call transforms that
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt; *    application into the given type.  Foreground applications have a
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt; *    menu bar and appear in the Dock.  Background applications do not
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt; *    appear in the Dock, do not have a menu bar ( and should not have
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt; *    windows or other user interface ).  UIElement applications do not
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt; *    have a menu bar, do not appear in the dock, but may in limited
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt; *    circumstances present windows and user interface. If a foreground
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt; *    application is frontmost when transformed into a background
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt; *    application, it is first hidden and another application is made
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt; *    frontmost.  A UIElement or background-only application which is
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt; *    transformed into a foreground application is not brought to the
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt; *    front (use SetFrontProcess() after the transform if this is
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt; *    required) nor will it be shown if it is hidden ( even if hidden
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt; *    automatically by being transformed into a background-only
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt; *    application ), so the caller should use ShowHideProcess() to show
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt; *    the application after it is transformed into a foreground
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt; *    application. Applications can only transform themselves; this
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt; *    call cannot change the type of another application.
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;extern OSStatus 
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;TransformProcessType(
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;  const ProcessSerialNumber *        psn,
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;  ProcessApplicationTransformState   transformState)          AVAILABLE_MAC_OS_X_VERSION_10_3_AND_LATER;  &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;上方的注释写的非常清楚，我们日常的 Cocoa Application 主要包含三种类型：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Foreground applications， 拥有一个 menu bar，并且会在 Dock 上出现；&lt;/li&gt;
&lt;li&gt;Background applications，Dock 上不存在并且没有 menu bar，并且不应该存在任何 UI 交互界面（建议）&lt;/li&gt;
&lt;li&gt;UIElement applications 有和 Background applications 相同的情况，但是允许在某些情况下展示用户界面。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;那上方这个方法 &lt;code&gt;TransformProcessType&lt;/code&gt; 就是进行这几种模式切换的。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-Swift&#34; data-lang=&#34;Swift&#34;&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-Swift&#34; data-lang=&#34;Swift&#34;&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;toggleDock&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;show&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;Bool&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;Bool&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;

    &lt;span class=&#34;c1&#34;&gt;// ProcessApplicationTransformState&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;transformState&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;show&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;?&lt;/span&gt; 
    &lt;span class=&#34;c1&#34;&gt;// show to foreground application &lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;// or not show to background application&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;ProcessApplicationTransformState&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;kProcessTransformToForegroundApplication&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; 
    &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ProcessApplicationTransformState&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;kProcessTransformToUIElementApplication&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

    &lt;span class=&#34;c1&#34;&gt;// transform current application type.&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;psn&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ProcessSerialNumber&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;highLongOfPSN&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;lowLongOfPSN&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;UInt32&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;kCurrentProcess&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;TransformProcessType&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;psn&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;transformState&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;这里实际上还有一种方案也是很多开发者选用的方案，通过指定 App 的&lt;code&gt;ActivationPolicy&lt;/code&gt;来实现的，核心的 API 是 &lt;code&gt;setActivationPolicy&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-Swift&#34; data-lang=&#34;Swift&#34;&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-Swift&#34; data-lang=&#34;Swift&#34;&gt;    &lt;span class=&#34;cm&#34;&gt;/* Attempts to modify the application&amp;#39;s activation policy.  In OS X 10.9, any policy may be set; prior to 10.9, the activation policy may be changed to NSApplicationActivationPolicyProhibited or NSApplicationActivationPolicyRegular, but may not be changed to NSApplicationActivationPolicyAccessory.  This returns YES if setting the activation policy is successful, and NO if not.
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;     */&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;@&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;available&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;OSX&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;10.6&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;open&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;setActivationPolicy&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;activationPolicy&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;NSApplication&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ActivationPolicy&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;Bool&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;而针对 ActivationPolicy 的详细解释也可以在其头文件注释中看到不同的 activation policy 意味着什么。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-Swift&#34; data-lang=&#34;Swift&#34;&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-Swift&#34; data-lang=&#34;Swift&#34;&gt;   &lt;span class=&#34;cm&#34;&gt;/* The following activation policies control whether and how an application may be activated.  They are determined by the Info.plist. */&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;enum&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;ActivationPolicy&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;Int&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;cm&#34;&gt;/* The application is an ordinary app that appears in the Dock and may have a user interface.  This is the default for bundled apps, unless overridden in the Info.plist. */&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;regular&lt;/span&gt;

        &lt;span class=&#34;cm&#34;&gt;/* The application does not appear in the Dock and does not have a menu bar, but it may be activated programmatically or by clicking on one of its windows.  This corresponds to LSUIElement=1 in the Info.plist. */&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;accessory&lt;/span&gt;
        
        &lt;span class=&#34;cm&#34;&gt;/* The application does not appear in the Dock and may not create windows or be activated.  This corresponds to LSBackgroundOnly=1 in the Info.plist.  This is also the default for unbundled executables that do not have Info.plists. */&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;prohibited&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;实际上不同的 activation policy 和 Info.plist 文件中写入不同元素的效果是对等的。regular policy 的应用就是常规引用的形式，会出现在 Dock 上，accessory policy 的应用就是指定当前应用为 agent，不再 Dock 出现。&lt;/p&gt;

&lt;p&gt;显示或者隐藏 Dock 的功能就可以通过切换当前的激活策略（activation policy来实现，如下代码所示：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-Swift&#34; data-lang=&#34;Swift&#34;&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-Swift&#34; data-lang=&#34;Swift&#34;&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;toggleDock2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;show&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;Bool&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;Bool&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;show&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;?&lt;/span&gt;
               &lt;span class=&#34;n&#34;&gt;NSApp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;setActivationPolicy&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;regular&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
             &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;NSApp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;setActivationPolicy&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;accessory&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h2 id=&#34;menu-bar&#34;&gt;Menu bar&lt;/h2&gt;

&lt;p&gt;一旦我们可以通过以上形式隐藏 Dock 图标之后，我们还需要为应用加上菜单栏按钮，具体做法是通过 &lt;code&gt;NSStatusItem&lt;/code&gt; 这个类，其代表一个系统菜单栏上的条目。具体操作如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-Swift&#34; data-lang=&#34;Swift&#34;&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-Swift&#34; data-lang=&#34;Swift&#34;&gt;&lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;statusItem&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;NSStatusBar&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;system&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;statusItem&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;withLength&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;NSStatusItem&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;squareLength&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;之后系统会在 Menu bar 上创建一个选项按钮，不过我们还需要设置该菜单选项的 UI，如下设置：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-Swift&#34; data-lang=&#34;Swift&#34;&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-Swift&#34; data-lang=&#34;Swift&#34;&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;button&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;statusItem&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;button&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;button&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;image&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;NSImage&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;named&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;NSImage&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;ic_dock&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;button&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;action&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;#selector&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;doWhatYouWantToDo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;_&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:))&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;此时应用启动之后菜单栏就会有图标展示了，详细可以参考 Raywenderlich 家的教程，不再赘述。 [&lt;a href=&#34;https://www.raywenderlich.com/450-menus-and-popovers-in-menu-bar-apps-for-macos&#34;&gt;Menus and Popovers in Menu Bar Apps for macOS&lt;/a&gt;]&lt;/p&gt;

&lt;p&gt;有个关于菜单栏按钮的库 &lt;a href=&#34;https://github.com/phranck/CCNStatusItem&#34;&gt;CCNStatusItem&lt;/a&gt; 提供了比较完整的需求，包括支持 menu 按钮定制，点击弹窗以及 Dragging and Drop 等支持。 不过该库已经很久没有维护了，仅做参考吧。&lt;/p&gt;

&lt;h1 id=&#34;参考文献&#34;&gt;参考文献&lt;/h1&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://medium.com/@jackymelb/show-hide-dock-icon-on-macos-app-3a59f7df282d&#34;&gt;Show/Hide dock icon on macOS App&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.apple.com/documentation/appkit/nsstatusitem&#34;&gt;NSStatusItem&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.raywenderlich.com/450-menus-and-popovers-in-menu-bar-apps-for-macos&#34;&gt;Menus and Popovers in Menu Bar Apps for macOS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/phranck/CCNStatusItem&#34;&gt;CCNStatusItem&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
      
    </item>
    
    <item>
      <title>在英文语言系统的 Safari 中使用印象笔记</title>
      <link>https://hechen.xyz/post/using-yinxiangbiji-system-english/</link>
      <pubDate>Wed, 13 Mar 2019 00:30:49 +0800</pubDate>
      
      <guid>https://hechen.xyz/post/using-yinxiangbiji-system-english/</guid>
      
        <description>&lt;blockquote&gt;
&lt;p&gt;因为 Evernote 在国内使用了不同的账户体系，去年团队也彻底独立出来，但是 Safari 的剪藏插件是同一个，&lt;a href=&#34;https://safari-extensions.apple.com/details/?id=com.evernote.safari.clipper-Q79WDW8YH9&#34;&gt;下载地址&lt;/a&gt;，但是当你系统是英文系统的时候，使用 Safari 剪藏有点尴尬，就是根本找不到印象笔记的登录入口，该文做个记录。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;!-- more --&gt;

&lt;p&gt;首先 Safari 默认是没有 Develop 菜单的，因此先开启 Develop 模式，进入 Safari 的选项设置面板中，最后 Advanced 选项卡最下方如图勾选。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/J5HvXn1.png&#34; alt=&#34;Capto_Capture 2019-03-13_12-39-08_A&#34; /&gt;&lt;/p&gt;

&lt;p&gt;此时，在 Safari 的顶部菜单中会多出 Develop 菜单入口，如下图所示：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/OxPf4Ji.png&#34; alt=&#34;Capto_Capture 2019-03-13_12-40-57_A&#34; /&gt;&lt;/p&gt;

&lt;p&gt;安装印象笔记的插件之后，点击 Safari 上的印象笔记剪藏按钮，你会发现直接带到 Evernote 的登录界面，没有渠道让我登录印象笔记，即使你 Safari 已经登录了印象笔记，登录的 Session 和 Cookie 信息并没有任何用。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/gVTWCOc.png&#34; alt=&#34;Capto_Capture 2019-03-13_12-50-48_A&#34; /&gt;&lt;/p&gt;

&lt;p&gt;这时，你就登录国际版 Evernote 账户，如果你没有，那就注册一个。总之，你需要先登录进去，因为我们必须让剪藏菜单展示出来才行。&lt;/p&gt;

&lt;p&gt;登录 Evernote 之后，打开一个页面进行剪裁，之后如图，我们终于看到了剪藏菜单：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/VtvROcP.png&#34; alt=&#34;Capto_Capture 2019-03-13_12-52-36_A&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/LsitsxG.png&#34; alt=&#34;Capto_Capture 2019-03-13_12-53-45_A&#34; /&gt;&lt;/p&gt;

&lt;p&gt;点击下方的 Options，打开设置选项&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/KpQefZc.png&#34; alt=&#34;Capto_Capture 2019-03-13_12-56-16_A&#34; /&gt;&lt;/p&gt;

&lt;p&gt;此时，因为刚才开启了 Develop 菜单选项卡，此时右键点击该窗口，&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/ylecnyS.png&#34; alt=&#34;Capto_Capture 2019-03-13_12-58-02_A&#34; /&gt;&lt;/p&gt;

&lt;p&gt;点击 Inspect Element 打开页面元素查看器，在下方元素展示区为焦点的前提下，Command +F 搜索 &lt;strong&gt;DeveloperContainer&lt;/strong&gt; 关键字。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/0DSMO39.png&#34; alt=&#34;Capto_Capture 2019-03-13_12-59-28_A&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/t3uqMa4.png&#34; alt=&#34;Capto_Capture 2019-03-13_01-02-18_A&#34; /&gt;&lt;/p&gt;

&lt;p&gt;所以大概猜得出来，这个面板实际上隐藏了一些开发者选项，这里通过 display:none 执行隐藏了，我们直接把 &lt;code&gt;display:none&lt;/code&gt; 删掉，双击就能选中。&lt;/p&gt;

&lt;p&gt;我们看到这个 div 下面包含很多 div（是一些开发者功能选项，就像很多程序一样，这些功能都被隐藏了，平时看不到），发现后面有一个 style =“display:none;”这是前端里面经常看到的一个样式语句，作用就是隐藏下面这个表里面的内容，然后按回车确定。&lt;/p&gt;

&lt;p&gt;你会发现上方印象笔记的剪藏插件刷新了，之后你会发现之前被隐藏的选项出现了，如下图所示：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/95qql8h.png&#34; alt=&#34;Capto_Capture 2019-03-13_01-05-31_A&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Developer Options 这个选项表单出现了，就在不远处看到了选项 &lt;code&gt;Simulate Simplified Chinese&lt;/code&gt;，选中后面复选框。之后剪藏插件会自动退登当前的 Evernote 账户，这时候再次点击剪藏按钮，就会触发印象笔记的登录了，地址会被带入地址 &lt;code&gt;https://app.yinxiang.com&lt;/code&gt; 域下。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/DH2DdLa.png&#34; alt=&#34;Capto_Capture 2019-03-13_01-10-22_A&#34; /&gt;&lt;/p&gt;

&lt;p&gt;登录完成之后，你的剪藏插件已经是印象笔记的账户了。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/PXCjU4U.png&#34; alt=&#34;Capto_Capture 2019-03-13_01-11-52_A&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Enjoy it.&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>为 NSView 增加 backgroundColor</title>
      <link>https://hechen.xyz/post/nsview&#43;backgroundcolor/</link>
      <pubDate>Mon, 11 Mar 2019 15:19:49 +0800</pubDate>
      
      <guid>https://hechen.xyz/post/nsview&#43;backgroundcolor/</guid>
      
        <description>&lt;p&gt;NSView 作为 Cocoa 中最基本的构成元素，是构成整个 Mac App 视图体系的基础，和 UIView 在 iOS 世界中的位置一样重要，可是在 UIView 里司空见惯的背景色设置，在 NSView 中却不见身影。&lt;/p&gt;

&lt;p&gt;在 iOS 中，设置 UIView 的背景色很简单。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-Swift&#34; data-lang=&#34;Swift&#34;&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-Swift&#34; data-lang=&#34;Swift&#34;&gt;&lt;span class=&#34;kd&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;UIKit&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;frame&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;CGRect&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;origin&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;zero&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;size&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;CGSize&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;width&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;100&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;height&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;100&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;view&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;UIView&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;frame&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;frame&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;view&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;backgroundColor&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;blue&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;而在 macOS 上，使用 NSView 背景色需要如下设置：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-Swift&#34; data-lang=&#34;Swift&#34;&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-Swift&#34; data-lang=&#34;Swift&#34;&gt;&lt;span class=&#34;kd&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Cocoa&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;frame&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;CGRect&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;origin&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;zero&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;size&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;CGSize&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;width&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;100&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;height&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;100&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;view&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;NSView&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;frame&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;frame&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;view&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;wantsLayer&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;view&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;layer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;?.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;backgroundColor&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;NSColor&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;blue&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cgColor&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;UIView 自身有一个 backgroundColor 的属性，而在 NSView 中是没有的，你需要做的是设置 View 所包含的 layer 的背景色。而且 layer 是 Optional 的，也就意味着 NSView 默认是不包含 layer 的，所以你还需要设置 wantsLayer 为 true 让 NSView 创建 layer 出来。&lt;/p&gt;

&lt;p&gt;在 Apple 的&lt;a href=&#34;https://developer.apple.com/documentation/appkit/nsview/1483695-wantslayer&#34;&gt;官方文档&lt;/a&gt; 有针对 wantsLayer 的一些说明&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Setting the value of this property to true turns the view into a layer-backed view—that is, the view uses a CALayer object to manage its rendered content. Creating a layer-backed view implicitly causes the entire view hierarchy under that view to become layer-backed. Thus, the view and all of its subviews (including subviews of subviews) become layer-backed. The default value of this property is false.&lt;/p&gt;
&lt;/blockquote&gt;
</description>
      
    </item>
    
    <item>
      <title>RxSwift 中的几种 Subject</title>
      <link>https://hechen.xyz/post/rxswift-subjects/</link>
      <pubDate>Tue, 26 Feb 2019 10:24:38 +0800</pubDate>
      
      <guid>https://hechen.xyz/post/rxswift-subjects/</guid>
      
        <description>

&lt;blockquote&gt;
&lt;p&gt;文中所用插图均出自书籍 《RxSwift - Reactive Programming with Swift》&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Subject 在 Rx 的世界里是这么一种存在，其既可以作为观测者，也可以作为被观测者。自然而然想到的是 Subject 本身就可以作为一种过渡桥接信号的手段，它订阅某个信号，一旦信号收到序列，转头它就又把信号散发给自己的观测者了。&lt;/p&gt;

&lt;p&gt;在 RxSwift 的世界里涉及几种 Subject，这里先行做个记录：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;PublishSubject&lt;/li&gt;
&lt;li&gt;BehaviorSubject&lt;/li&gt;
&lt;li&gt;ReplaySubject&lt;/li&gt;
&lt;li&gt;Variable （预计在 5.0 废弃）&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;publishsubject&#34;&gt;PublishSubject&lt;/h2&gt;

&lt;p&gt;PublishSubject 只给订阅者发送新元素，也就是订阅者只能接受到订阅之后发出的信号。一图胜千言，看👇&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/Cw4FjCT.png&#34; alt=&#34;publishSubject&#34; /&gt;&lt;/p&gt;

&lt;p&gt;其中第一排是某个作为 Observable 角色的 Subject，自左至右为严格时间线， 2 和 3 排均为订阅了该 Subject 的观测者，向上的虚线表明订阅的时机，可以看到观测者只能接收到订阅之后由 Subject 新发射出的信号。&lt;/p&gt;

&lt;h2 id=&#34;behaviorsubject&#34;&gt;BehaviorSubject&lt;/h2&gt;

&lt;p&gt;BehaviorSubject 会在订阅者订阅之后发送最新的一个信号元素，自然需要你在初始化该对象的时候给其设定初始化值（否则对于第一次订阅的观测者来说，哪来的最新发射的元素呢？）。如果初始化的时候无法提供默认值，那可能你就需要用到上面的 PublishSubject 了。其中常用的 Variable 和 BehaviorRelay 都是对其的封装。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/ei6pCwT.png&#34; alt=&#34;BehaviorSubject&#34; /&gt;&lt;/p&gt;

&lt;p&gt;从图中可以看到和上方 Publish 区别的是其在观测者订阅之后会收到最新的最后一个信号。&lt;/p&gt;

&lt;h2 id=&#34;replaysubject&#34;&gt;ReplaySubject&lt;/h2&gt;

&lt;p&gt;顾名思义，ReplaySubject 会重新发射在订阅者订阅之间发出的信号，具体发多少是由 bufferSize 决定的，其指定需要 cache 多少个信号，如下图中所示，Buffer Size 为 2，因此当第二个订阅者订阅 Subject 之后，其会收到最新的 1 和 2 两个信号。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-Swift&#34; data-lang=&#34;Swift&#34;&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-Swift&#34; data-lang=&#34;Swift&#34;&gt;&lt;span class=&#34;c1&#34;&gt;/// 指定发射多少最新信号&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;subject&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ReplaySubject&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;create&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bufferSize&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/uuHAQ9c.png&#34; alt=&#34;replaySubject&#34; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;需要注意一点：所有被 Cache 的信号本身都是在内存中的，因此需要考虑到缓存信号的最大个数以及每个信号的负载，比如你的每个信号本身是 Image 数据，然后又 Cache 了比较多的数目，这时候内存压力就会很大，所以使用这个 ReplaySubject 的时候需要注意内存问题。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;variable&#34;&gt;Variable&lt;/h2&gt;

&lt;p&gt;Variable 自身实质上是 BehaviorSubject 的封装，所以它具备 Behavior 每次订阅就会接收到最新信号元素的属性，但是和 BehaviorSubject 不同在于其不会因为收到 Error 事件导致整个序列停止（也就是说只有 completion 信号才会让该信号终结），而它的信号完成是在其 deinit 方法中。&lt;/p&gt;

&lt;p&gt;我们在日常使用中喜欢 Variable 的一个最大原因可能就是直接获取它的值，而不需要像常规信号一般需要进行订阅才能取得它的值，而且不需要进行订阅，想用即取，而且其生命周期完全和 ARC 结合，无需主动取消订阅。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-Swift&#34; data-lang=&#34;Swift&#34;&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-Swift&#34; data-lang=&#34;Swift&#34;&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;variable&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Variable&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Initial value&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;variable&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;value&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;New initial value&amp;#34;&lt;/span&gt;
&lt;span class=&#34;bp&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;variable&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;目前在 RxSwift 中 Variable 已经被标记为废弃，如果你使用了 Variable 类型，编译器会在 Console 中打印出以下内容：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;`Variable` is planned for future deprecation. Please consider `BehaviorRelay` as a replacement. Read more at: https://git.io/vNqvx&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;目前官方给出的推荐是使用 BehaviorRelay，详细解释如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-Comments&#34; data-lang=&#34;Comments&#34;&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-Comments&#34; data-lang=&#34;Comments&#34;&gt;/// Current recommended replacement for this API is `RxCocoa.BehaviorRelay` because:
/// * `Variable` isn&amp;#39;t a standard cross platform concept, hence it&amp;#39;s out of place in RxSwift target.
/// * It doesn&amp;#39;t have a counterpart for handling events (`PublishRelay`). It models state only.
/// * It doesn&amp;#39;t have a consistent naming with *Relay or other Rx concepts.
/// * It has an inconsistent memory management model compared to other parts of RxSwift (completes on `deinit`).&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;首先 Variable 是 RxSwift 为 Apple 生态加入的一个名词，并不是 Rx 生态共有的概念，而且名字上也显得和其他概念格格不入，因此严格意义算起来并不是 Rx 生态的一部分了；&lt;/p&gt;

&lt;p&gt;另外，它功能上几乎和 BehaviorRelay 一样，使用 BehaviorRelay 也能实现同样的功能。&lt;/p&gt;

&lt;p&gt;最后一点，其内存管理语义和 Rx 其他概念也不一样，其他的信号终结是严格按照 completion 和 error 信号，但是 Variable 直到对象被释放掉才默认触发 completion 信号。&lt;/p&gt;

&lt;p&gt;详细官方讨论在&lt;a href=&#34;https://github.com/ReactiveX/RxSwift/issues/1501&#34;&gt;这里&lt;/a&gt;&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>Apple Event Sandboxing</title>
      <link>https://hechen.xyz/post/appleevents-usage-description/</link>
      <pubDate>Thu, 21 Feb 2019 23:25:38 +0800</pubDate>
      
      <guid>https://hechen.xyz/post/appleevents-usage-description/</guid>
      
        <description>

&lt;h2 id=&#34;问题背景&#34;&gt;问题背景&lt;/h2&gt;

&lt;p&gt;最近在修改某个 &lt;a href=&#34;https://github.com/hechen/vibe&#34;&gt;Mac 应用&lt;/a&gt;，其原理就是通过执行一段 AppleScript 获取 OmniFocus 的信息，然后进行可视化展示，但是总取不到数据。&lt;/p&gt;

&lt;!-- more --&gt;

&lt;h2 id=&#34;原因&#34;&gt;原因&lt;/h2&gt;

&lt;p&gt;关键数据获取阶段执行的 AppleScript 的时候总是取不到数据。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-AppleScript&#34; data-lang=&#34;AppleScript&#34;&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-AppleScript&#34; data-lang=&#34;AppleScript&#34;&gt;&lt;span class=&#34;k&#34;&gt;set&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;theProgressDetail&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;to&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;tell&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;application&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;OmniFocus&amp;#34;&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;tell&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;front&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;document&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;set&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;theModifiedProjects&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;to&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;every&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;flattened&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;project&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;repeat&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;with&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;to&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;length&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;of&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;theModifiedProjects&lt;/span&gt;
                &lt;span class=&#34;k&#34;&gt;set&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;theCompletedTasks&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;to&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;every&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;flattened&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;task&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;of&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;item&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;of&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;theModifiedProjects&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;where&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;its&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;number&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;of&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;tasks&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
                &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;theCompletedTasks&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;is not&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;equal to&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{}&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;then&lt;/span&gt;
                    &lt;span class=&#34;k&#34;&gt;repeat&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;with&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;b&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;to&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;length&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;of&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;theCompletedTasks&lt;/span&gt;
                        &lt;span class=&#34;k&#34;&gt;set&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;theProgressDetail&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;to&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;theProgressDetail&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;completion&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;date&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;of&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;item&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;b&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;of&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;theCompletedTasks&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;return&lt;/span&gt;
                    &lt;span class=&#34;k&#34;&gt;end&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;repeat&lt;/span&gt;
                &lt;span class=&#34;k&#34;&gt;end&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;end&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;repeat&lt;/span&gt;

        &lt;span class=&#34;k&#34;&gt;set&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;theInboxCompletedTasks&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;to&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;every&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;inbox&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;task&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;where&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;its&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;number&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;of&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;tasks&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    
        &lt;span class=&#34;k&#34;&gt;repeat&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;with&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;d&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;to&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;length&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;of&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;theInboxCompletedTasks&lt;/span&gt;    
            &lt;span class=&#34;k&#34;&gt;set&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;theProgressDetail&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;to&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;theProgressDetail&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;completion&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;date&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;of&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;item&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;d&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;of&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;theInboxCompletedTasks&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;return&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;end&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;repeat&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;end&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;tell&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;end&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;tell&lt;/span&gt;

&lt;span class=&#34;nb&#34;&gt;display dialog&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;theProgressDetail&lt;/span&gt;

&lt;span class=&#34;no&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;theProgressDetail&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;在 Cocoa 中是通过执行如下代码执行：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-Swift&#34; data-lang=&#34;Swift&#34;&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-Swift&#34; data-lang=&#34;Swift&#34;&gt;&lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;myAppleScript&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;I am a piece of applescript&amp;#34;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;scriptObject&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;NSAppleScript&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;source&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;myAppleScript&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;error&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;NSDictionary&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;?&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;output&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;scriptObject&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;executeAndReturnError&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;error&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;进行 Debug 启动 App 或者 Archive 安装包执行可执行文件，均无法正常获取执行结果，直接报错。 具体错误原因：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&amp;#34;NSAppleScriptErrorMessage&amp;#34; : &amp;#34;Not authorized to send Apple events to OmniFocus.&amp;#34;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;很显然，没有权限执行该脚本来发送 Apple Event 给 OmniFocus 从而执行对应操作。&lt;/p&gt;

&lt;p&gt;针对 Apple Event 的权限控制， 是 macOS Mojave 系统带入 macOS 的，Apple 把权限控制进一步收缩，并且要求开发者显示告知用户你的 App 要干什么。当然 iOS 开发同学肯定很清楚，我们无论是拿摄像头，读取相册，甚至是 FaceID 等都是要明确的在 App 中声明的，也就是要在 Info.plist 文件中声名的。&lt;/p&gt;

&lt;p&gt;对于 macOS Mojave 系统而言，新增了针对 Apple Event 的权限控制，需要开发者在 plist 文件中增加 &lt;strong&gt;NSAppleEventsUsageDescription&lt;/strong&gt; 信息，并且明确告知用户 Apple Event 会用来做什么事情。这也是去年 WWDC 2018 Session  &lt;a href=&#34;https://developer.apple.com/wwdc18/702&#34;&gt;&amp;ldquo;Your Apps and the Future of macOS Security&amp;rdquo;&lt;/a&gt; 中提到的，所有给其他 App 发送 AppleEvent 的 Cocoa App 均会受到影响，这就是  &lt;strong&gt;AppleEvent sandboxing&lt;/strong&gt;。 如果你不添加该声明字段，App 就默认不进行任何显示授权行为并且默认无权限进行相关操作，也就是本文前面出现的情况。&lt;/p&gt;

&lt;p&gt;话不多说，在 info.plist 中加入 NSAppleEventsUsageDescription 字段，并且填入具体权限声明,&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/NEBjVZ3.png&#34; alt=&#34;Capto_Capture 2019-02-21_11-47-11_P&#34; /&gt;&lt;/p&gt;

&lt;p&gt;再次启动 App 之后就会有如下弹窗提示：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/wm5GWLO.png&#34; alt=&#34;Capto_Capture 2019-02-21_11-47-42_P&#34; /&gt;&lt;/p&gt;

&lt;p&gt;前面执行 Apple Script 的方法会同步等待授权结果，用户点击允许之后，App 就能正常获取数据了。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/sfN59K4.png&#34; alt=&#34;Capto_Capture 2019-02-21_11-08-44_P&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;参考文档&#34;&gt;参考文档&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://developer.apple.com/videos/play/wwdc2018/702/&#34;&gt;WWDC 2018 Session 702&lt;/a&gt;&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>关于一次 SS 流量丢失的过程记录</title>
      <link>https://hechen.xyz/post/%E5%85%B3%E4%BA%8E%E4%B8%80%E6%AC%A1-ss-%E6%B5%81%E9%87%8F%E4%B8%A2%E5%A4%B1%E7%9A%84%E8%BF%87%E7%A8%8B%E8%AE%B0%E5%BD%95/</link>
      <pubDate>Mon, 28 Jan 2019 17:51:35 +0000</pubDate>
      
      <guid>https://hechen.xyz/post/%E5%85%B3%E4%BA%8E%E4%B8%80%E6%AC%A1-ss-%E6%B5%81%E9%87%8F%E4%B8%A2%E5%A4%B1%E7%9A%84%E8%BF%87%E7%A8%8B%E8%AE%B0%E5%BD%95/</guid>
      
        <description>

&lt;h2 id=&#34;2019-01-29-更新&#34;&gt;2019-01-29 更新&lt;/h2&gt;

&lt;p&gt;早上一到办公室连接上公司网络，网速直接就飚到了 600KB/s，果不其然，还是 &lt;code&gt;com.apple.Safari.SafeBrowsing.Service&lt;/code&gt; 这个服务进程。这就尴尬了，看来并不是说你不用 Safari 就不会触发。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/yifgIEZ.png&#34; alt=&#34;Surge Dashboard&#34; /&gt;&lt;/p&gt;

&lt;p&gt;直接把 Surge 规则中的 Rule 由 Direct 改成了 Reject。&lt;/p&gt;

&lt;h2 id=&#34;问题追踪&#34;&gt;问题追踪&lt;/h2&gt;

&lt;p&gt;在 2018 年 12 月底的时候，偶然间登录 AgentNEO 查看刚买的流量使用情况。但是发现，刚在前几天购买的 SS 流量在短短的 4 天之内就耗了将近 95GB，就在 1 月 1 日元旦当天就耗了接近 75GB，要知道，我平时的月均流量也就维持在 10 GB 不到，毕竟平时在公司办公，业余时间 Youtube 也看的相对少。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/9tRs9vh.png&#34; alt=&#34;AgentNEO 流量面板&#34; /&gt;&lt;/p&gt;

&lt;p&gt;在最初看到这个统计数据之后，我一度怀疑是他们网站的流量统计有问题。&lt;/p&gt;

&lt;p&gt;后续几天，我实际上对流量耗损比较关注，有一天注意到，Surge 的流量监控速率一直持续不断的显示达五六百 KB/s 的下载流量，但是我知道自己当时并没有下载任何东西。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/nWz8JAt.png&#34; alt=&#34;Surge Menu Bar&#34; /&gt;&lt;/p&gt;

&lt;p&gt;打开 Surge Dashboard，看到如下的情形：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/9kVX27V.png&#34; alt=&#34;Surge Dashboard&#34; /&gt;&lt;/p&gt;

&lt;p&gt;可以看到当时在持续不断的进行下载动作的进程名称是 &lt;code&gt;com.apple.Safari.SafeBrowsing.Service&lt;/code&gt;，看请求地址是 safebrowsing.googleapis.com。&lt;/p&gt;

&lt;p&gt;从进程名字来看应该是 Safari 和安全流量相关的服务，通过 Snitch 的数据库查到对其的说明：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Safari has built-in support for Google’s Safe Browsing service to identify fraudulent and unsafe websites. Right before Safari navigates to a certain website, the website gets checked for possible security concerns using Google’s Safe Browsing online database. Accessing the online database requires connections to Google servers.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;说的大概是该服务是针对 Safari 浏览器启用的，在 Safari 要帮你导航到下一级页面的时候，会识别该页面是否是欺诈🐶或者不安全⚠️的网站，我们在 Safari 的 Security 菜单中可以找到启用关于欺诈网站的检测功能的开关。以我本机上看到的内容如下&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Safari uses Tencent Safe Browsing and Google Safe Browsing to identify fraudulent websites.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;大概意思就是 Safari 使用腾讯的安全浏览服务和 Google 的安全浏览服务来鉴别欺诈网站，腾讯应该是本地化的产物。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/wEhv8iu.png&#34; alt=&#34;Little Snitch Network Monitor&#34; /&gt;&lt;/p&gt;

&lt;p&gt;通过针对该进程的出口请求 host 也可以验证这一点，该进程发起的网络请求会有如下两个 host 出口：
1. safebrowsing.googleapis.com
2. safebrowsing.urlsec.qq.com&lt;/p&gt;

&lt;p&gt;其实在 iOS 设备上也有同样的进程来做这件事情，抓包有时候也能捕捉到这两个请求（国行）：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/eDNI4jk.jpg&#34; alt=&#34;iPhone 上的 safebrowsing&#34; /&gt;&lt;/p&gt;

&lt;p&gt;而这次出问题的就是 google 提供的欺诈网站特征库。
&lt;img src=&#34;https://i.imgur.com/BtfvMIV.png&#34; alt=&#34;Little Snitch Network Monitor&#34; /&gt;&lt;/p&gt;

&lt;p&gt;尝试关闭 Surge 作为系统流量代理之后，看到 Activity Monitor 中进程又开始了下载，如下图所示，只是连接请求主体从原来 Surge 切换到了独立进程而已（Surge 会接管网络流量，因此之前该任务的下载会算到 Surge 的头上），但是针对该 host 的下载任务一致持续不断。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;说起来，Little Snitch Network Monitor 这款软件也是当时为了查流量丢失问题，才买的。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/SUT5qQC.png&#34; alt=&#34;Little Snitch Network Monitor&#34; /&gt;&lt;/p&gt;

&lt;p&gt;而在我关闭 Surge 作为代理之前，可以看到该进程大概在 7 个小时之内耗了 12.4 GB 的流量。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/Gnxc4bB.png&#34; alt=&#34;Little Snitch Network Monitor&#34; /&gt;&lt;/p&gt;

&lt;p&gt;而在网络上目前未看到针对 safebrowsing 进程的大量讨论，国内论坛 &lt;a href=&#34;https://www.v2ex.com/t/404025&#34;&gt;V2EX&lt;/a&gt; 里也看到有人遇到该问题。&lt;/p&gt;

&lt;p&gt;目前暂时不清楚是官方 Bug 还是我电脑安装了什么插件或者软件导致。暂时先停掉使用 Safari 了，用 Chrome 用上一段时间之后再用 Snitch 看下情况吧。&lt;/p&gt;

&lt;p&gt;另一方面，因为不放心，在 Surge 的自定义规则中加了一条：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-Conf&#34; data-lang=&#34;Conf&#34;&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-Conf&#34; data-lang=&#34;Conf&#34;&gt;	NAME,com.apple.Safari.SafeBrowsing.Service,DIRECT&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;针对该进程的所有流量都直连，不用代理了。 后续有任何进展会更新到 Blog 中。&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>在 Swift Framework 中使用 C 文件的过程探索</title>
      <link>https://hechen.xyz/post/swift-and-modules/</link>
      <pubDate>Thu, 03 Jan 2019 21:19:24 +0000</pubDate>
      
      <guid>https://hechen.xyz/post/swift-and-modules/</guid>
      
        <description>

&lt;h2 id=&#34;问题描述&#34;&gt;问题描述&lt;/h2&gt;

&lt;p&gt;我们在开发线上诊断工具需求的时候，是以单个 Pod 的形式提供支持，并且代码文件中只有纯 Swift 文件，但是其中需要用到系统的 C 库的一些功能，本次就是使用了系统 C 库中 &lt;code&gt;resolv.h&lt;/code&gt; 这个文件来进行 DNS 解析所用。&lt;/p&gt;

&lt;p&gt;当后期 Pod 功能完善之后，在 Example 工程中也已经编译通过之后，接入主项目中之后遇到了下面这个编译错误：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/ADh0sy6.png&#34; alt=&#34;Error When Compile&#34; /&gt;&lt;/p&gt;

&lt;p&gt;具体文字错误信息如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-txt&#34; data-lang=&#34;txt&#34;&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-txt&#34; data-lang=&#34;txt&#34;&gt;/Users/chen/Repos/Work/ZHDiagnosisTool/ZHDiagnosisTool/Classes/Core/Network/ZHDiagnosisTool-Network-Header.h:8:10: 
    Include of non-modular header inside framework module &amp;#39;Diagnosis.ZHDiagnosisTool_Network_Header&amp;#39;: &amp;#39;/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS12.1.sdk/usr/include/resolv.h&amp;#39;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;大概的意思就是在 Umbrella Header 中加入的 Bridging header 指定了 include 一个 C 文件，而该 C 文件本身并不是  Modular Header， 因此编译无法通过。这就涉及了目前 iOS 生态中普遍使用的 Modules 概念。&lt;/p&gt;

&lt;h2 id=&#34;几个概念&#34;&gt;几个概念&lt;/h2&gt;

&lt;h3 id=&#34;modules&#34;&gt;Modules&lt;/h3&gt;

&lt;p&gt;Modules 的概念是 XCode 5 带到 iOS 开发者面前的，从那时起 LLVM 编译器就已经内在支持了，具体关于其历史在 &lt;a href=&#34;https://onevcat.com/2013/06/new-in-xcode5-and-objc/&#34;&gt;WWDC 2013 Session笔记 - Xcode5和ObjC新特性&lt;/a&gt; 这篇文章中已经讲解的非常详细了，不再赘述，总结一句话就是：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Modules 是被引入 LLVM 层面的，用以解决之前 C/C++ 系中 #include 和 #import 带来的引用泛滥以及编译时间过长的问题的一种手段。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;尤其是在 Swift 引入之后，Module 的概念应该已经深入人心。大家可能已经习惯直接使用 @import 来引用某个 Module，或者其中某个功能单元。尤其是使用 CocoaPods 集成开发的时候，其内部实际上也是做了一些 module 的工作，在 Pods 目录中充斥着 &lt;code&gt;.modulemap&lt;/code&gt; 的身影，想必大家经常看到。&lt;/p&gt;

&lt;p&gt;而 一个 module 的属性是由定义它的 &lt;code&gt;.modulemap&lt;/code&gt; 文件来决定的，其简单语法大概如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-Shell&#34; data-lang=&#34;Shell&#34;&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-Shell&#34; data-lang=&#34;Shell&#34;&gt;module module_name &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;system&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
    header &lt;span class=&#34;s2&#34;&gt;&amp;#34;header.h&amp;#34;&lt;/span&gt;
    link &lt;span class=&#34;s2&#34;&gt;&amp;#34;linked_library&amp;#34;&lt;/span&gt;
    &lt;span class=&#34;nb&#34;&gt;export&lt;/span&gt; *
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;如果对其中 &lt;a href=&#34;https://clang.llvm.org/docs/Modules.html#module-map-language&#34;&gt;Modules 的语法&lt;/a&gt;感兴趣，可以到 Clang 的官方文档下通读下，你肯定会对 Modules 这一套有更清楚的认识。&lt;/p&gt;

&lt;h3 id=&#34;umbrella-header&#34;&gt;Umbrella Header&lt;/h3&gt;

&lt;p&gt;说起来，Umbrella Header 是在 Framework 的概念被引入的，你可以理解为一个模块均存在一个 Umbrella Header 用来将那些你想暴露给模块外界调用的头文件包裹在一起。避免使用者在使用该模块的时候需要手动输入多个 Header 的一种解决方案。 其实 Mac 端很早就有这个概念，iOS 中特指 iOS 8 开始官方加入 Dynamic Framework 以后的概念。&lt;/p&gt;

&lt;p&gt;如下所示，没有 Umbrella Header 的情况下你需要将所有需要引入的头文件依次写出。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-objc&#34; data-lang=&#34;objc&#34;&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-objc&#34; data-lang=&#34;objc&#34;&gt;&lt;span class=&#34;cp&#34;&gt;#import &amp;lt;XYZModule/XYZCustomCell.h&amp;gt;
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;#import &amp;lt;XYZModule/XYZCustomView.h&amp;gt;
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;#import &amp;lt;XYZModule/XYZCustomViewController.h&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;在使用了 Umbrella Header 之后，你只需要下面一行即可。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-objc&#34; data-lang=&#34;objc&#34;&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-objc&#34; data-lang=&#34;objc&#34;&gt;&lt;span class=&#34;cp&#34;&gt;#import &amp;lt;XYZModule/XYZModule.h&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;当然，还存在 umbrella framework，感兴趣大家可以到&lt;a href=&#34;https://developer.apple.com/library/archive/documentation/MacOSX/Conceptual/BPFrameworks/Concepts/FrameworkAnatomy.html#//apple_ref/doc/uid/20002253-97623-BAJJHAJC&#34;&gt;官方文档&lt;/a&gt;下观看。&lt;/p&gt;

&lt;h3 id=&#34;bridging-header&#34;&gt;Bridging-Header&lt;/h3&gt;

&lt;p&gt;桥接文件是在 Swift 推出之后，Apple 引入iOS 生态的用以桥接 Swift 和 Objective-C 相互调用的一种方式 （Mix and Match），如下图所示，如果在 Swift 中想使用 Objective-C 类定义的内容，就需要建立 Bridging Header，然后在其中定义你想要暴露的 OC 头文件。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/YwqHEKJ.png&#34; alt=&#34;Bridging Header&#34; /&gt;&lt;/p&gt;

&lt;p&gt;具体的操作在&lt;a href=&#34;https://developer.apple.com/documentation/swift/imported_c_and_objective-c_apis/importing_objective-c_into_swift&#34;&gt;官方文档&lt;/a&gt;有针对在同一个 App Target 和在同一个 Framework 内两种情况均有说明。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;在梳理这些概念的过程中，发现自己之前对桥接文件有个误区，如果你在 App 的主 Target 中需要进行 OC 和 Swift 的混编，使用 Bridging Header 是必选，如果你是在同一个 Framework 中进行的混编，Bridging-Header 是并不需要的，你需要做的只是在 Umbrella Header 里加入你想暴露给 Swift 文件使用的 OC 头文件即可，之前自己一直是显式的建立一个 Bridging-Header，然后在 Umbrella Header 中引入该头文件，想来这种方式只是将你想暴露在外的头文件进行了二次包裹而已，因为 Cocoapods 是将所有 public header 均加入到 umbrella header 里了，因此单个 framework 内部开发，即使没有 bridge header 也是能够将符号暴露给 Swift 的。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;cocoapods&#34;&gt;Cocoapods&lt;/h3&gt;

&lt;p&gt;我们每次执行 &lt;code&gt;pod install&lt;/code&gt; 的时候，如果你使用 &lt;code&gt;—verbose&lt;/code&gt; 来看详细安装过程就能看到，针对每一个将要被安装的 Pod 均会执行生成 module map 和 umbrella header 这两个阶段，如下所示部分 Install 指令的代码，代码位于 &lt;code&gt;lib/cocoapods/installer/xcode/pods_project_generator/aggregate_target_installer.rb&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;install!&lt;/span&gt;
       &lt;span class=&#34;no&#34;&gt;UI&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;message&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;- Installing target `&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;#{&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;target&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;` &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;#{&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;target&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;platform&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;do&lt;/span&gt;
       &lt;span class=&#34;n&#34;&gt;native_target&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;add_target&lt;/span&gt;
       &lt;span class=&#34;n&#34;&gt;create_support_files_dir&lt;/span&gt;
       &lt;span class=&#34;n&#34;&gt;create_support_files_group&lt;/span&gt;
       &lt;span class=&#34;n&#34;&gt;create_xcconfig_file&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;native_target&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
       &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;target&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;host_requires_frameworks?&lt;/span&gt;
          &lt;span class=&#34;n&#34;&gt;create_info_plist_file&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;target&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;info_plist_path&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;native_target&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;target&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;version&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;target&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;platform&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    	    &lt;span class=&#34;n&#34;&gt;create_module_map&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;native_target&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
          &lt;span class=&#34;n&#34;&gt;create_umbrella_header&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;native_target&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
       &lt;span class=&#34;k&#34;&gt;elsif&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;target&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;uses_swift?&lt;/span&gt;
          &lt;span class=&#34;n&#34;&gt;create_module_map&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;native_target&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    			&lt;span class=&#34;n&#34;&gt;create_umbrella_header&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;native_target&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
       &lt;span class=&#34;k&#34;&gt;end&lt;/span&gt;
      
     &lt;span class=&#34;c1&#34;&gt;# Some Code&lt;/span&gt;
     &lt;span class=&#34;c1&#34;&gt;# Some Code&lt;/span&gt;
     &lt;span class=&#34;c1&#34;&gt;# Some Code      &lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;很明确，Cocoapods 在 install 某个 Pod 的时候会执行创建 module map 文件以及 umbrella header 文件的工作。详细的代码大家可以直接到 Cocoapods 源码下  &lt;code&gt;lib/cocoapods/generator&lt;/code&gt; 目录下看，分别是 &lt;code&gt;module_map.rb&lt;/code&gt; 和 &lt;code&gt;umbrella_header.rb&lt;/code&gt; 文件。&lt;/p&gt;

&lt;p&gt;其中在各自文件的注释部分也有针对生成文件的说明，比如 &lt;code&gt;module_map.rb&lt;/code&gt; 中说明了 module map 的作用，&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Generates LLVM module map files. A module map file is generated for each Pod and for each Pod target definition that is built as a framework. It specifies a different umbrella header than usual to avoid name conflicts with existing headers of the podspec.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;在 &lt;code&gt;umbrella_header.rb&lt;/code&gt; 中说明了 umbrella header 的作用，&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Generates an umbrella header file for clang modules, which are used by dynamic frameworks on iOS 8 and OSX 10.10 under the hood. If the target is a +PodTarget+, then the umbrella header is required to make all public headers in a convenient manner available without the need to write out header declarations for every library header.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;问题原因&#34;&gt;问题原因&lt;/h2&gt;

&lt;p&gt;首先解答：为什么 Example 工程能够编译通过 而用了主工程是无法编译通过？&lt;/p&gt;

&lt;p&gt;因为目前主工程都要求我们自行开发的 pod 以动态 framework 的形式参与，但是在 Example 工程开发的时候我们的 &lt;code&gt;podfile&lt;/code&gt; 并未指定 &lt;code&gt;use_frameworks!&lt;/code&gt; 用以产出动态 framework，因此未暴露出该问题，也就是说只有以 framework 的形式的 module 才会有该问题，准确的说，应该是 &lt;code&gt;Dynamic Framework&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;了解了以上概念之后，我们再来看我们的问题，首先我们的问题是在 framework 内部调用系统 C 库代码出现的问题，从 Xcode 的报错，我们知道我们通过 bridging header 引入的 C 文件并不以 module 的形式存在，因此编译器报错。&lt;/p&gt;

&lt;h2 id=&#34;解决过程&#34;&gt;解决过程&lt;/h2&gt;

&lt;p&gt;其实吧，大家都能想到，使用 Objective-C 做个封装，或者干脆直接调用 C 文件的类用 OC 重写不就完了么，可是如果下次你再遇到了呢？ 或者要改造了一个纯 Swift 库呢？知其所以然，才能避免再次落坑吧。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;因为 Objective-C 自身编译器是帮你做了 modular 化的，当然，如果你选择了前者，还有个限制，你并不能把上面 C 的头文件放到你的 Objective-C 的头文件中，因为本质上，最后这个头文件还是要暴露给 Umbrella Header 的。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;首先，能否允许编译器支持在 module 中引入非 modular 的头文件呢？&lt;/p&gt;

&lt;p&gt;Xcode 在 build setting 中提供了  &lt;code&gt;Allow Non-modular Includes In Framework Modules&lt;/code&gt; 来控制是否允许在当前 framework 中支持非 modular 头文件引入，其并不适用于纯 Swift 项目，而且即使适用，其会导致所有用到该 framework 的大的编译单元都不能再使用 module 形式引入头文件了，也就是必须适用平坦式的 &lt;code&gt;#include &amp;quot;&amp;quot;&lt;/code&gt; 形式。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/S4i2chx.png&#34; alt=&#34;Build Setting&#34; /&gt;&lt;/p&gt;

&lt;p&gt;最后，通过只能从根源上来解决该问题了，既然需要引入的文件是 modular header，我们就要想办法来将其包裹为 module。 在查找解决方案的过程中发现，就在 Swift 刚推出的时候，大家已经遇到这个问题了，遇到最多的就是&lt;code&gt;CommonCrypto&lt;/code&gt; 经常被使用到的 C 库，常见的 MD5 计算就是其提供的 API，但是在前几年官方并未将该动态库 module 化，因此导致你无法在 Swift 文件中直接使用类似 &lt;code&gt;#import &amp;lt;CommonCrypto/CommonCrypto.h&amp;gt;&lt;/code&gt; 这种写法。自然而言多了很多解决方案，如下出自 StackOverflow 上 &lt;a href=&#34;https://stackoverflow.com/questions/25248598/importing-commoncrypto-in-a-swift-framework/37125785#37125785&#34;&gt;Importing CommonCrypto in a Swift framework&lt;/a&gt; 的帖子下面就提供了多种解决方案：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;还是那句话，你是可以通过 Objective-C 做桥接来达到同样效果的。毕竟 Swift 本身就是一门心思想抛开 C 的历史包袱，因此想拥有一个纯纯的 Swift 代码不沾染一点 C 文件气息，你就要做一些工作。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;其中根本问题就是为 &lt;code&gt;CommonCrypto&lt;/code&gt; 这个 C 编译单元定义 module，上面也提到了 LLVM 是通过 &lt;code&gt;modulemap&lt;/code&gt; 文件来识别的，所以只要通过 &lt;code&gt;.modulemap&lt;/code&gt; 来定义即可，&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;    module CommonCrypto [system] {
        header &amp;#34;/usr/include/CommonCrypto/CommonCrypto.h&amp;#34;
        export *
    }&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;定义的 modulemap 自然可以放到任意目录，只要让编译单元在编译的时候能够搜索的到即可，Xcode 选项的 Build Settings 下的 Swift Compiler - Search Paths 。添加 .modulemap 文件所在路径即可。在编译的时候 LLVM 自然会查找到 .modulemap 文件自动生成 Module 信息。你此时就可以在使用  CommonCrypto 的地方使用 modular header 了。&lt;/p&gt;

&lt;p&gt;过了几年之后，官方才将该库定义为 module，在 Xcode 自带的 iOS SDK 中 &lt;code&gt;/usr/include/CommonCrypto&lt;/code&gt; 下可以看到 &lt;code&gt;module.modulemap&lt;/code&gt; 文件：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;module CommonCrypto [system] [extern_c] {
      umbrella header &amp;#34;CommonCrypto.h&amp;#34;
      export *
      module * { export * }
      
      module Error {
          header &amp;#34;CommonCryptoError.h&amp;#34;
          export *
      }
      
      module Random {
          header &amp;#34;CommonRandom.h&amp;#34;
          export *
      }
    }&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;大家也注意到了在 CommonCrypto 的同级目录中实际上还有很多的系统 C 库代码，并且也有一个 module.modulemap 文件，我裁剪一段代码大家看下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;28
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;29
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;30
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;31
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;32
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;33
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;34
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;35
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;36
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;37
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;38
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;39
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;40
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;41
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;42
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;43
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;44
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;45
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;46
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;47
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;module Compression [system] [extern_c] {
    header &amp;#34;compression.h&amp;#34;
    export *
    link &amp;#34;compression&amp;#34;
}
    
module Darwin [system] [extern_c] [no_undeclared_includes] {
    // Headers that are repeatedly included, and therefore should not be
    	// assigned to any given module.
    	exclude header &amp;#34;_structs.h&amp;#34;
    	exclude header &amp;#34;sys/_structs.h&amp;#34;
    
    	// C standard library
    	module C {
    		textual header &amp;#34;assert.h&amp;#34;
    
    	  module setjmp {
    			header &amp;#34;setjmp.h&amp;#34;
    			export *
    		}
    
    		module signal {
    			header &amp;#34;signal.h&amp;#34;
    			export *
    		}
    
    		module stdio {
    			header &amp;#34;stdio.h&amp;#34;
    			export *
    		}
    }
    
    module zlib [system] [extern_c] {
    	header &amp;#34;zlib.h&amp;#34;
    	export *
    	link &amp;#34;z&amp;#34;
    }
    
    module SQLite3 [system] [extern_c] {
    	header &amp;#34;sqlite3.h&amp;#34;
    	link &amp;#34;sqlite3&amp;#34;
    	explicit module Ext {
    		header &amp;#34;sqlite3ext.h&amp;#34;
    		export *
    	}
    	export *
    }&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;这也是为什么我们在 Swift 代码里可以直接使用类似 &lt;code&gt;import Darwin.C.stdio&lt;/code&gt; 写法的原因。但是还是存在一些 C 库并没有被定义为 module，而本次用来做 DNS 解析的 &lt;code&gt;resolv.h&lt;/code&gt; 就是其中一员。&lt;/p&gt;

&lt;p&gt;具体到我们解决思路里来看就是要解决 modulemap 如何定义，如何和我们目前使用的 cocoapods 整合的问题了。既然是在作为 pod 进行开发，自然是需要将 module map 文件加入到 pod 的代码管理中去。比如将其放置于单个 pod 根目录下，然后在 podspec 中配置好路径以便编译的时候 Swift Search Paths 中有它。自然，我们可以建立 resolv.modulemap 如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;module Resolv &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;system&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
    header &lt;span class=&#34;s2&#34;&gt;&amp;#34;/usr/include/resolv.h&amp;#34;&lt;/span&gt;
    &lt;span class=&#34;nb&#34;&gt;export&lt;/span&gt; *
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;然后在对应的 podspec 文件中配置 build setting 中的参数，如下所示&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;9
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;subspec&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;Core&amp;#39;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;do&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;core&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;core&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;source_files&lt;/span&gt;   &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;ZHDiagnosisTool/Classes/Core/**/*&amp;#39;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; 
    &lt;span class=&#34;n&#34;&gt;core&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;preserve_paths&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;ZHDiagnosisTool/Classes/Core/ModuleMap&amp;#39;&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;core&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pod_target_xcconfig&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;s1&#34;&gt;&amp;#39;SWIFT_INCLUDE_PATHS[sdk=macosx*]&amp;#39;&lt;/span&gt;           &lt;span class=&#34;o&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;$(PODS_ROOT)/ZHDiagnosisTool/Classes/Core/ModuleMap&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;s1&#34;&gt;&amp;#39;SWIFT_INCLUDE_PATHS[sdk=iphoneos*]&amp;#39;&lt;/span&gt;         &lt;span class=&#34;o&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;$(PODS_ROOT)/ZHDiagnosisTool/Classes/Core/ModuleMap&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;s1&#34;&gt;&amp;#39;SWIFT_INCLUDE_PATHS[sdk=iphonesimulator*]&amp;#39;&lt;/span&gt;  &lt;span class=&#34;o&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;$(PODS_ROOT)/ZHDiagnosisTool/Classes/Core/ModuleMap&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;可是，问题出在 PODS_ROOTS 这个路径上，如果我们进行本地开发，该路径就是 Cocoapods 执行完毕之后生成的临时 Pods 目录，并不是原始 podspec 文件所在的地方，而官方也表明了，不会对这种 Local Pods 特定提供一个环境变量来获取， 如下链接可以看到：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/CocoaPods/CocoaPods/issues/809&#34;&gt;local pod development on a project that includes libraries · Issue #809 · CocoaPods/CocoaPods&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;如图中，指定 $(PODS_ROOT) 路径实际上在开发 Local Pod 的时候就会找不到，所以就需要按照上面链接中的方式自行手动拼接路径，所以，我们尽可能不用 PODS_ROOT 这个路径，需要另外找一个不会因为 Pod 位置而变化的路径。&lt;/p&gt;

&lt;p&gt;最终参考了以下 repo 中工程的解决方案，&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/onmyway133/Arcane&#34;&gt;onmyway133/Arcane&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;其中作者使用 Pod 的 script phase 来完成 .modulemap 的操作，这样会更加灵活。&lt;/p&gt;

&lt;p&gt;这样，针对我们自己本次的需求来看，.podspec 中的 script 如下所写即可：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# Create&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;FRAMEWORK_DIR&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;BUILT_PRODUCTS_DIR&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;/RESOLV.framework&amp;#34;&lt;/span&gt;
          
&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt; -d &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;FRAMEWORK_DIR&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;then&lt;/span&gt;
    &lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;FRAMEWORK_DIR&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt; already exists, so skipping the rest of the script.&amp;#34;&lt;/span&gt;
    &lt;span class=&#34;nb&#34;&gt;exit&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;fi&lt;/span&gt;
          
mkdir -p &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;FRAMEWORK_DIR&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;/Modules&amp;#34;&lt;/span&gt;
          
&lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;module RESOLV [system] {
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;    header \&amp;#34;&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;SDKROOT&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;/usr/include/resolv.h\&amp;#34;
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;    export *
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;}&amp;#34;&lt;/span&gt; &amp;gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;FRAMEWORK_DIR&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;/Modules/module.modulemap&amp;#34;&lt;/span&gt;
               
    
&lt;span class=&#34;c1&#34;&gt;# Generate fake header...&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt; -d &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;FRAMEWORK_DIR&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;/Headers&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;||&lt;/span&gt; mkdir &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;FRAMEWORK_DIR&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;/Headers&amp;#34;&lt;/span&gt;
touch &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;FRAMEWORK_DIR&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;/Headers/resolv.h&amp;#34;&lt;/span&gt;
    
&lt;span class=&#34;c1&#34;&gt;# Soft link C header to local framework Headers&lt;/span&gt;
ln -sf &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;SDKROOT&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;/usr/include/resolv.h&amp;#34;&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;FRAMEWORK_DIR&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;/Headers/resolv.h&amp;#34;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;每次在编译运行前，我们会自行创建一个 &lt;code&gt;Resolv.framework&lt;/code&gt;，其中 Header 目录中我们放一个空白文件并且软链接到真正想要链接的头文件上，然后在该 framework 中创建 modulemap 文件。&lt;/p&gt;

&lt;p&gt;之后，我们在 .podspec 中指定 script phase 为编译前即可，如下所示，&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;script_phase&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;ss&#34;&gt;:name&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;Resolv&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;ss&#34;&gt;:script&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;script_above&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;ss&#34;&gt;:execution_position&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;:before_compile&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;这样，通过 &lt;code&gt;Resolv.framework&lt;/code&gt; 的桥接，Swift 代码中就可以直接通过 &lt;code&gt;import RESOLV&lt;/code&gt; 来使用了。当然，链接这一环你可以通过以下两种形式达到：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;直接在 podspec 文件中指定依赖，如 &lt;code&gt;core.library = &amp;quot;resolv&amp;quot;&lt;/code&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;在 &lt;code&gt;.modulemap&lt;/code&gt; 文件中显式的 link，如下所示：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;module Resolv &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;system&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
header &lt;span class=&#34;s2&#34;&gt;&amp;#34;/usr/include/resolv.h&amp;#34;&lt;/span&gt;
link &lt;span class=&#34;s2&#34;&gt;&amp;#34;resolv&amp;#34;&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;export&lt;/span&gt; *
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;而且通过将 module map 文件放置于 product 产出目录这里也解决了路径指定的问题，因为 product folder 是默认在编译的搜索路径下的。&lt;/p&gt;

&lt;h2 id=&#34;总结&#34;&gt;总结&lt;/h2&gt;

&lt;p&gt;总结来看，就是想要在纯 Swift 的项目中引入系统 C 库文件（这里指的是未被 modular 化的文件，因为有些 C 文件已经被系统默认封装成了 module 了）。以上只是一些简单的概念讲解，整个编译系统以及套件都是长时间不断演化的结果，这里也只是简单的讲述，有一些概念实际上也只是点到为止，大家如果感兴趣可以多找一些相关资料阅读下，亲自试一试。&lt;/p&gt;

&lt;h2 id=&#34;参考资料&#34;&gt;参考资料&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;http://llvm.org/devmtg/2012-11/Gregor-Modules.pdf&#34;&gt;Modules&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://zh.wikipedia.org/wiki/LLVM&#34;&gt;LLVM - 维基百科，自由的百科全书&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://clang.llvm.org/docs/Modules.html#introduction&#34;&gt;Modules - Clang 8 documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://onevcat.com/2013/06/new-in-xcode5-and-objc/&#34;&gt;WWDC 2013 Session笔记 - Xcode5和ObjC新特性&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://stackoverflow.com/questions/25248598/importing-commoncrypto-in-a-swift-framework/37125785#37125785&#34;&gt;Importing CommonCrypto in a Swift framework&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://forums.developer.apple.com/thread/46477&#34;&gt;Adding CommonCrypto to custom Swift framework |Apple Developer Forums&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://theswiftdev.com/2018/01/15/how-to-call-c-code-from-swift/&#34;&gt;How to call C code from Swift - The.Swift.Dev.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://medium.com/swift-and-ios-writing/using-a-c-library-inside-a-swift-framework-d041d7b701d9/&#34;&gt;Using a C library inside a Swift framework - Swift and iOS Writing - Medium&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
      
    </item>
    
    <item>
      <title>UserDefaults and Keychain</title>
      <link>https://hechen.xyz/post/userdefaults-and-keychain/</link>
      <pubDate>Fri, 21 Dec 2018 14:30:50 +0000</pubDate>
      
      <guid>https://hechen.xyz/post/userdefaults-and-keychain/</guid>
      
        <description>

&lt;p&gt;Apple 提供了几种持久化方案，其中 UserDefaults 和 Keychain 是 App 开发过程中使用频率最高的方案，而且从以往和同事的探讨过程中发现对这两个概念中有一些细节还是理解不太透彻，因此本文会针对这二者展开讲一讲。&lt;/p&gt;

&lt;h2 id=&#34;userdefaults&#34;&gt;UserDefaults&lt;/h2&gt;

&lt;p&gt;首先，阅读完 Apple 关于 UserDefaults 一节的文档描述之后，我觉得有两个需要注意的点：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;UserDefaults 的构成&lt;/li&gt;
&lt;li&gt;UserDefaults 的目的&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;userdefaults-构成&#34;&gt;UserDefaults 构成&lt;/h3&gt;

&lt;p&gt;我们可以看看具体 UserDefaults 存储的地方，如下图，我们在应用中写入 Demo 数据：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/wq9onOa.png&#34; alt=&#34;Write Key-Value to UserDefaults&#34; /&gt;&lt;/p&gt;

&lt;p&gt;打印 Library 路径，在 Finder 中打开路径:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/65ybYX6.png&#34; alt=&#34;Library&#34; /&gt;&lt;/p&gt;

&lt;p&gt;如下展示内容，可以看到在 Preferences 目录中存在某个文件，例如该 App Library 目录下存放的文件为 &lt;code&gt;app.chen.ios.PersistenceDemo.plist&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/ChqnDJa.png&#34; alt=&#34;Cache&#34; /&gt;
&lt;img src=&#34;https://i.imgur.com/cPvlFdR.png&#34; alt=&#34;Preferences&#34; /&gt;&lt;/p&gt;

&lt;p&gt;该 plist 内容如图所示，即为我们之前在 App 中写入的 Key-Value。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/shdXoZN.png&#34; alt=&#34;plist&#34; /&gt;&lt;/p&gt;

&lt;p&gt;所以这也证明了，我们针对 UserDefaults 的读写实质上是针对 plist 文件的读写。&lt;/p&gt;

&lt;p&gt;iOS 系统会自动帮你做 &lt;code&gt;plist&lt;/code&gt; 文件的读入以及 Cache，根据情况会把你在内存中所做的操作同步到 &lt;code&gt;plist&lt;/code&gt; 文件（UserDefaults 同步到内存是同步的，同步到 Database 是异步的， iOS 8 开始，会有一个常驻进程 &lt;code&gt;cfprefsd&lt;/code&gt; 来负责同步）。&lt;/p&gt;

&lt;p&gt;所以你会看有iOS 面试题目会问题： 系统的 &lt;code&gt;UserDefaults&lt;/code&gt; 的本质以及和 plist 文件的直接读写的区别？（这题目太 TM 偏了。。。）&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;UserDefaults caches the information to avoid having to open the user’s defaults database each time you need a default value. When you set a default value, it’s changed synchronously within your process, and asynchronously to persistent storage and other processes.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;所以，实质上，你是可以直接针对 UserDefaults 的最终产物 plist 文件进行操作的，当然，这是有风险的，而且无法保障正常使用的。官方在文档中也提醒了开发者。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Don’t try to access the preferences subsystem directly. Modifying preference property list files may result in loss of changes, delay of reflecting changes, and app crashes. To configure preferences, use the defaults command-line utility in macOS instead.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;那既然本质上 UserDefaults 是使用 plist 文件进行存储，那也要求了我们能存储的 Value 只能支持 &lt;code&gt;plist&lt;/code&gt; 所支持的格式，例如 &lt;code&gt;String&lt;/code&gt;，&lt;code&gt;Number&lt;/code&gt;，&lt;code&gt;Array&lt;/code&gt;，&lt;code&gt;Data&lt;/code&gt;，&lt;code&gt;Date&lt;/code&gt; 等，当然如果你要存储自定义的类，其需要遵守 &lt;code&gt;Codable&lt;/code&gt; 协议（实质也是要归档为 &lt;code&gt;Data&lt;/code&gt;）&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/cxWHfvS.png&#34; alt=&#34;plist&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;userdefaults-目的&#34;&gt;UserDefaults 目的&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;The defaults system allows an app to customize its behavior to match a user’s preferences. For example, you can allow users to specify their preferred units of measurement or media playback speed. Apps store these preferences by assigning values to a set of parameters in a user’s defaults database.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;一般我们在 &lt;code&gt;UserDefaults&lt;/code&gt; 存储的数据都是用户的某些配置项，不因为用户使用过程中出现意外而丢失，比如是否开启了日夜间模式了，是否开启了大图模式了等等。或者存储一些对安全方面不敏感的数据&lt;/p&gt;

&lt;p&gt;不建议往 &lt;code&gt;UserDefaults&lt;/code&gt; 里存储较大的数据，例如直接存储一张图片。而对于这种需要存储较大文件的需求，你可以将文件本身存储到本地，而 &lt;code&gt;UserDefaults&lt;/code&gt; 里只存储该文件的路径。&lt;/p&gt;

&lt;p&gt;毕竟在 App 启动之后，UserDefaults 会进行 IO ，读取本地 plist 文件，因此一定程度上，也会较少 App 启动之后 UserDefaults API 针对 &lt;code&gt;plist&lt;/code&gt; 文件 IO 的时间，纯属个人揣测，没有经过实验验证。&lt;/p&gt;

&lt;h3 id=&#34;关于-extension-中-userdefaults-的应用&#34;&gt;关于 Extension 中 UserDefaults 的应用&lt;/h3&gt;

&lt;p&gt;iOS 上 Extension 和 Host App 之间做数据共享也是通过 UserDefaults，开启 App Group 之后，这二者就可以修改同一份配置。具体 Extension 和 Host App 之间的内在关系可以先看下 Apple 文档。本质上如下所示，&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/cZFlz6o.png&#34; alt=&#34;app_extensions_container_restrictions&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Extension 和 Host App 之间通过 Shared Container 来做数据共享，该 SharedContainer 私有，因此不存在于单一 App 的沙盒内。应该是系统会单独开辟一块空间用以做共享数据的存储。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;After you enable app groups, an app extension and its containing app can both use the NSUserDefaults API to share access to user preferences. To enable this sharing, use the initWithSuiteName: method to instantiate a new NSUserDefaults object, passing in the identifier of the shared group.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;因为 UserDefaults 既然是暴露在本地能够访问的文件当中的，因此不要在 UserDefaults 里存储任何 Security-Sensitive 的数据。 如果要存储保密级别较高的数据，就要用到另外一种持久化方案 ── Keychain&lt;/p&gt;

&lt;h2 id=&#34;keychain&#34;&gt;Keychain&lt;/h2&gt;

&lt;p&gt;关于 Keychain，是 Apple 提供给开发者用来存储 Security-Sensitive 的数据了，比如登录密码，用户标识，加密数据等等。 官方示意图如下，其实中间 Keychain 的 API 还进行了 Decrypt 和 Encrypt 的动作。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/tvA4lV3.png&#34; alt=&#34;Keychain services API&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Apple 提供的 Keychain API 大部分都是 C 语言写成，使用起来相对不便，因此基本上我们都会使用二次加工过的库，比如知乎用的就是 SMKeychain。&lt;/p&gt;

&lt;p&gt;Keychain 中的数据完全交由系统保管并加密过( AES 128 in GCM (Galois/Counter Mode))的，因此能够保证安全性。&lt;/p&gt;

&lt;p&gt;如果对加密这一块感兴趣，可以看下&lt;a href=&#34;https://www.apple.com/business/site/docs/iOS_Security_Guide.pdf&#34;&gt;苹果的白皮书&lt;/a&gt;中 Keychain data protection 这一节。&lt;/p&gt;

&lt;p&gt;另外，Keychain 的数据并不存放在 App 的 Sanbox 中，即使删除了 App，资料依然保存在 keychain 中。如果重新安装了app，还可以从 keychain 获取数据。&lt;/p&gt;

&lt;h3 id=&#34;同一个-app-内部共享&#34;&gt;同一个 App 内部共享&lt;/h3&gt;

&lt;p&gt;类似 UserDefaults ，Keychain 也支持 Extension 和 host app 之间的共享，需要在每个 Target 的 Capability 下开启 Keychain Sharing 功能，并且设置为同一个 Group。&lt;/p&gt;

&lt;h3 id=&#34;不同-app-之间共享&#34;&gt;不同 App 之间共享&lt;/h3&gt;

&lt;p&gt;和 UserDefaults 不同的是，Keychain 的数据是可以跨 App 获取的，但是限于一个开发者的 App，也就是需要确保这些 App 所属的 Team ID 是相同的。&lt;/p&gt;

&lt;p&gt;这个也是App 进行 SSO 登录的基础，比如知乎日报使用知乎主 App 登录也是基于此原理。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/0L2MA23.png&#34; alt=&#34;shared items&#34; /&gt;&lt;/p&gt;

&lt;p&gt;在需要进行 Keychain 共享的 App 内开启 Keychain Sharing 的能力，所属同一个 Team ID 下的 App 本身都可以读取该 Keychain 的内容，类似于 AppGroup，这里也会产生 Keychain Group。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Allows this application to share passwords from its keychain with other applications made by your team.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/DJsInJb.png&#34; alt=&#34;Keychain Sharing&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;参考文档&#34;&gt;参考文档&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.apple.com/documentation/foundation/userdefaults&#34;&gt;https://developer.apple.com/documentation/foundation/userdefaults&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.reddit.com/r/jailbreak/comments/2qpqi9/ios_812_has_protection_against_plist_file_editing/&#34;&gt;https://www.reddit.com/r/jailbreak/comments/2qpqi9/ios_812_has_protection_against_plist_file_editing/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://iphonedevwiki.net/index.php/PreferenceBundles&#34;&gt;http://iphonedevwiki.net/index.php/PreferenceBundles&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.apple.com/library/archive/documentation/General/Conceptual/ExtensibilityPG/ExtensionScenarios.html&#34;&gt;https://developer.apple.com/library/archive/documentation/General/Conceptual/ExtensibilityPG/ExtensionScenarios.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.apple.com/documentation/security/keychain_services&#34;&gt;https://developer.apple.com/documentation/security/keychain_services&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/soffes/SAMKeychain&#34;&gt;https://github.com/soffes/SAMKeychain&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.apple.com/documentation/security/keychain_services/keychain_items/sharing_access_to_keychain_items_among_a_collection_of_apps&#34;&gt;https://developer.apple.com/documentation/security/keychain_services/keychain_items/sharing_access_to_keychain_items_among_a_collection_of_apps&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
      
    </item>
    
    <item>
      <title>如何制作 Send to 2Do 的 Safari 书签</title>
      <link>https://hechen.xyz/post/send-to-2do/</link>
      <pubDate>Mon, 26 Nov 2018 14:59:50 +0000</pubDate>
      
      <guid>https://hechen.xyz/post/send-to-2do/</guid>
      
        <description>

&lt;p&gt;使用鼠标拖拽下面这个链接到你的 Favorites Bar 上，默认点击行为实际上是模拟在当前页面进行导航，而目标地址由 &lt;code&gt;avascript:window.location&lt;/code&gt; 来指定，目标地址实际上就是各个 App 的 URL Scheme。
你可以在 &lt;a href=&#34;https://app-talk.com/&#34;&gt;AppTalk&lt;/a&gt;查看各个主流 App 的 URL Scheme。&lt;/p&gt;

&lt;h2 id=&#34;2do&#34;&gt;2Do&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;javascript:window.location=&#34;&gt;Send to 2Do&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;然后编辑地址，将其替换为如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;javascript:window.location=&amp;#39;twodo://x-callback-url/add?task=&amp;#39;+encodeURIComponent(document.title)+&amp;#39;&amp;amp;note=&amp;#39;+encodeURIComponent(window.location)+&amp;#39;&amp;amp;action=url:&amp;#39;+encodeURIComponent(window.location)&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/7M0xN1g.jpg&#34; alt=&#34;Change Value&#34; /&gt;&lt;/p&gt;

&lt;p&gt;所以，本质上是执行了一段 JS 代码，结合当前文档的上下文信息，调用 URL Scheme，其中&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;document.title&lt;/code&gt; 为标题&lt;/li&gt;
&lt;li&gt;&lt;code&gt;window.location&lt;/code&gt; 为当前页面链接&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;things&#34;&gt;Things&lt;/h2&gt;

&lt;p&gt;我们知道 Things 的 URL Scheme 的规则如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C&#34; data-lang=&#34;C&#34;&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C&#34; data-lang=&#34;C&#34;&gt;&lt;span class=&#34;c1&#34;&gt;/// add a todo due when tomorrow
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;things&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;///&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;add&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;?&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;title&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;iamtitle&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;notes&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;iamnotes&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;when&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tomorrow&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;a href=&#34;things:///add?title=iamtitle&amp;amp;notes=iamnotes&amp;amp;when=tomorrow&#34;&gt;Add a todo to Things&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;比如你可以把链接内容改为支持 Send To Things：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-JavaScript&#34; data-lang=&#34;JavaScript&#34;&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-JavaScript&#34; data-lang=&#34;JavaScript&#34;&gt;&lt;span class=&#34;nx&#34;&gt;javascript&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;window&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;location&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;things:///add?title=&amp;#39;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;encodeURIComponent&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;document&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;title&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&amp;amp;notes=&amp;#39;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;encodeURIComponent&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;window&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;location&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&amp;amp;when=today&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h2 id=&#34;omnifocus&#34;&gt;OmniFocus&lt;/h2&gt;

&lt;p&gt;同理，可以有 Send To OmniFocus ，如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-JavaScript&#34; data-lang=&#34;JavaScript&#34;&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-JavaScript&#34; data-lang=&#34;JavaScript&#34;&gt;&lt;span class=&#34;nx&#34;&gt;javascript&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;window&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;location&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;omnifocus:///add?note=&amp;#39;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;encodeURIComponent&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;window&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;location&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&amp;amp;name=&amp;#39;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;encodeURIComponent&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;document&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;title&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;a href=&#34;things:///add?title=iamtitle&amp;amp;notes=iamnotes&amp;amp;when=tomorrow&#34;&gt;Add a todo to OmniFocus&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;或者直接去 &lt;a href=&#34;http://people.omnigroup.com/kc/OmniFocus/SendToOmniFocusBookmarklet.html&#34;&gt;OmniFocus 页面&lt;/a&gt; 用相同方式把起已经设置好正确 Value 的链接拖到上方工具条上即可。&lt;/p&gt;

&lt;p&gt;如果你找不到 Favorites Bar，点击 Safari 菜单栏上的 View 菜单就能看到（中文系统叫视图）&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/ZBqkn4Z.jpg&#34; alt=&#34;Favorites Bar&#34; /&gt;&lt;/p&gt;
</description>
      
    </item>
    
  </channel>
</rss>
